{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst authedSession = cookies.get(\"authedSession\");\nconst isAuthed = cookies.get(\"isAuthed\");\n\nconst checkAuthed = async () => {\n  if (isAuthed && authedSession) return true;\n\n  if (isAuthed && !authedSession) {\n    const response = await axios.post(\"http://localhost:8080/api/auth\", {\n      withCredentials: true\n    });\n    return response ? true : false;\n  }\n\n  return false;\n};\n\naxios.defaults.withCredentials = true;\n\nconst useAuth = () => {\n  _s();\n\n  const [isUser, setIsUser] = useState(checkAuthed);\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\n  const checkUser = localStorage.getItem(\"user\");\n  useEffect(() => {\n    if (checkUser) {\n      console.log(\"checkUser: \", checkUser);\n      const currentUser = JSON.parse(checkUser);\n      setUser(currentUser); // setIsUser(authedSession);\n    } else {\n      setUser();\n      setIsUser(false);\n    }\n  }, []); // useEffect(() => {\n  //   console.log(\"User: \", user);\n  //   async function getData() {\n  //     if (isAuthed && !authedSession && checkUser) {\n  //       try {\n  //         const response = await axios.post(\"http://localhost:8080/api/auth\", {\n  //           withCredentials: true,\n  //         });\n  //         window.location.reload();\n  //         console.log(response.data);\n  //       } catch (err) {\n  //         handleLogout();\n  //         // window.location.reload();\n  //         alert(err);\n  //         console.log(err);\n  //       }\n  //     }\n  //     if (!isAuthed && checkUser) handleLogout();\n  //   }\n  //   getData();\n  // });\n\n  const handleLogin = async (username, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:8080/api/login\", JSON.stringify({\n        username,\n        password\n      }), {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      window.location.reload();\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n      setUser(response.data.user);\n      setIsUser(true);\n    } catch (err) {\n      var _err$response, _err$response2;\n\n      if (!(err !== null && err !== void 0 && err.response)) {\n        alert(\"An unexpected error occurred. Please try again later.\");\n      } else if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 400) {\n        alert(\"Missing Username or Password\");\n      } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        alert(\"Incorrect username or password\");\n        console.log(\"Incorrect username or password\");\n      } else {\n        alert(\"Login Failed\");\n      }\n    }\n  };\n\n  const handleLogout = () => {\n    axios.delete(\"http://localhost:8080/api/clear-cookies\");\n    axios.get(\"http://localhost:8080/api/logout\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredential: true\n    }).then(() => {\n      localStorage.clear();\n      console.log(\"Logged out successfully.\");\n    }).catch(() => {\n      console.log(\"An internal server error has occurred.\");\n    });\n    localStorage.clear();\n    setUser(false);\n  };\n\n  return {\n    user,\n    isUser,\n    setUser,\n    setIsUser,\n    handleLogin,\n    handleLogout\n  };\n};\n\n_s(useAuth, \"T6uOrkvwHzuuqV5cKr+gHNUsU+8=\");\n\nexport default useAuth; // TODO: Make a function validateInput that checks\n// const validateInput = (username, password) => {\n//   if (!(username has a number && lowercase letters)) {\n//     return false;\n//   }\n//   if (!(password has numbers && has uppercase letters && lowercase letters)) {\n//     return false;\n//   }\n//\n//   return true;\n// }","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/hooks/useAuth.js"],"names":["useState","useEffect","axios","Cookies","cookies","authedSession","get","isAuthed","checkAuthed","response","post","withCredentials","defaults","useAuth","isUser","setIsUser","user","setUser","localStorage","getItem","checkUser","console","log","currentUser","JSON","parse","handleLogin","username","password","stringify","headers","window","location","reload","setItem","data","err","alert","status","handleLogout","delete","withCredential","then","clear","catch"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nconst authedSession = cookies.get(\"authedSession\");\nconst isAuthed = cookies.get(\"isAuthed\");\nconst checkAuthed = async () => {\n  if (isAuthed && authedSession) return true;\n  if (isAuthed && !authedSession) {\n    const response = await axios.post(\"http://localhost:8080/api/auth\", {\n      withCredentials: true,\n    });\n    return response ? true : false;\n  }\n  return false;\n};\n\naxios.defaults.withCredentials = true;\n\nconst useAuth = () => {\n  const [isUser, setIsUser] = useState(checkAuthed);\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\n  const checkUser = localStorage.getItem(\"user\");\n\n  useEffect(() => {\n    if (checkUser) {\n      console.log(\"checkUser: \", checkUser);\n      const currentUser = JSON.parse(checkUser);\n      setUser(currentUser);\n      // setIsUser(authedSession);\n    } else {\n      setUser();\n      setIsUser(false);\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   console.log(\"User: \", user);\n  //   async function getData() {\n  //     if (isAuthed && !authedSession && checkUser) {\n  //       try {\n  //         const response = await axios.post(\"http://localhost:8080/api/auth\", {\n  //           withCredentials: true,\n  //         });\n  //         window.location.reload();\n  //         console.log(response.data);\n  //       } catch (err) {\n  //         handleLogout();\n  //         // window.location.reload();\n  //         alert(err);\n  //         console.log(err);\n  //       }\n  //     }\n\n  //     if (!isAuthed && checkUser) handleLogout();\n  //   }\n  //   getData();\n  // });\n\n  const handleLogin = async (username, password) => {\n    try {\n      const response = await axios.post(\n        \"http://localhost:8080/api/login\",\n        JSON.stringify({ username, password }),\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n          withCredentials: true,\n        }\n      );\n\n      window.location.reload();\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n\n      setUser(response.data.user);\n      setIsUser(true);\n    } catch (err) {\n      if (!err?.response) {\n        alert(\"An unexpected error occurred. Please try again later.\");\n      } else if (err.response?.status === 400) {\n        alert(\"Missing Username or Password\");\n      } else if (err.response?.status === 401) {\n        alert(\"Incorrect username or password\");\n        console.log(\"Incorrect username or password\");\n      } else {\n        alert(\"Login Failed\");\n      }\n    }\n  };\n\n  const handleLogout = () => {\n    axios.delete(\"http://localhost:8080/api/clear-cookies\");\n    axios\n      .get(\"http://localhost:8080/api/logout\", {\n        headers: { \"Content-Type\": \"application/json\" },\n        withCredential: true,\n      })\n      .then(() => {\n        localStorage.clear();\n        console.log(\"Logged out successfully.\");\n      })\n      .catch(() => {\n        console.log(\"An internal server error has occurred.\");\n      });\n\n    localStorage.clear();\n    setUser(false);\n  };\n\n  return {\n    user,\n    isUser,\n    setUser,\n    setIsUser,\n    handleLogin,\n    handleLogout,\n  };\n};\n\nexport default useAuth;\n\n// TODO: Make a function validateInput that checks\n// const validateInput = (username, password) => {\n//   if (!(username has a number && lowercase letters)) {\n//     return false;\n//   }\n//   if (!(password has numbers && has uppercase letters && lowercase letters)) {\n//     return false;\n//   }\n//\n//   return true;\n// }\n"]},"metadata":{},"sourceType":"module"}