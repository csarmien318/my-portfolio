{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nrequire(\"dotenv\").config();\n\nconst baseUrl = \"https://api.weatherapi.com/v1/current.json\";\nconst apiKey = process.env.REACT_APP_API_KEY;\nconsole.log(process.env.REACT_APP_API_KEY);\n\nconst useWeather = () => {\n  _s();\n\n  const [error, setError] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [weather, setWeather] = useState(null);\n\n  const getData = async location => {\n    try {\n      await axios(`${baseUrl}`, {\n        params: {\n          key: apiKey,\n          q: location\n        }\n      });\n    } catch (error) {\n      if (location === \"\") {\n        setError(\"Enter a city\");\n        console.log(error);\n      } else if (error.response && error.response.status >= \"400\") {\n        setError(\"Sorry, we couldn't find the city you entered.\");\n        console.log(error);\n      } else {\n        console.log(\"Logging error...\", error);\n        alert(\"An unexpected error occurred.\");\n      }\n\n      setLoader(false);\n      return;\n    }\n\n    return await axios(`${baseUrl}`, {\n      params: {\n        key: apiKey,\n        q: location\n      }\n    });\n  };\n\n  const gatherData = data => {\n    setLoader(false);\n    setWeather({\n      city: data.location.name,\n      state: data.location.region,\n      country: data.location.country,\n      temperature: data.current.temp_f,\n      conditions: data.current.condition.text,\n      precipitation: data.current.precip_in,\n      icon: data.current.condition.icon,\n      humidity: data.current.humidity,\n      feelsLike: data.current.feelslike_f,\n      windSpeed: data.current.wind_mph,\n      windDirection: data.current.wind_dir,\n      pressure: data.current.pressure_in,\n      visibility: data.current.vis_miles,\n      uvIndex: data.current.uv,\n      date: data.current.last_updated\n    });\n    console.log(data);\n  };\n\n  const submitRequest = async location => {\n    setLoader(true);\n    setError(false);\n    const response = await getData(location);\n    if (!response) return;\n    const {\n      data\n    } = response;\n    gatherData(data);\n  };\n\n  return {\n    error,\n    loader,\n    weather,\n    submitRequest\n  };\n};\n\n_s(useWeather, \"WFWJjLDRxx3HbdWFPigElpOcNIo=\");\n\nexport default useWeather;","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/hooks/useWeather.js"],"names":["useState","axios","require","config","baseUrl","apiKey","process","env","REACT_APP_API_KEY","console","log","useWeather","error","setError","loader","setLoader","weather","setWeather","getData","location","params","key","q","response","status","alert","gatherData","data","city","name","state","region","country","temperature","current","temp_f","conditions","condition","text","precipitation","precip_in","icon","humidity","feelsLike","feelslike_f","windSpeed","wind_mph","windDirection","wind_dir","pressure","pressure_in","visibility","vis_miles","uvIndex","uv","date","last_updated","submitRequest"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\n\nrequire(\"dotenv\").config();\n\nconst baseUrl = \"https://api.weatherapi.com/v1/current.json\";\nconst apiKey = process.env.REACT_APP_API_KEY;\nconsole.log(process.env.REACT_APP_API_KEY);\n\nconst useWeather = () => {\n  const [error, setError] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [weather, setWeather] = useState(null);\n\n  const getData = async (location) => {\n    try {\n      await axios(`${baseUrl}`, {\n        params: { key: apiKey, q: location },\n      });\n    } catch (error) {\n      if (location === \"\") {\n        setError(\"Enter a city\");\n        console.log(error);\n      } else if (error.response && error.response.status >= \"400\") {\n        setError(\"Sorry, we couldn't find the city you entered.\");\n        console.log(error);\n      } else {\n        console.log(\"Logging error...\", error);\n        alert(\"An unexpected error occurred.\");\n      }\n      setLoader(false);\n      return;\n    }\n    return await axios(`${baseUrl}`, {\n      params: { key: apiKey, q: location },\n    });\n  };\n\n  const gatherData = (data) => {\n    setLoader(false);\n    setWeather({\n      city: data.location.name,\n      state: data.location.region,\n      country: data.location.country,\n      temperature: data.current.temp_f,\n      conditions: data.current.condition.text,\n      precipitation: data.current.precip_in,\n      icon: data.current.condition.icon,\n      humidity: data.current.humidity,\n      feelsLike: data.current.feelslike_f,\n      windSpeed: data.current.wind_mph,\n      windDirection: data.current.wind_dir,\n      pressure: data.current.pressure_in,\n      visibility: data.current.vis_miles,\n      uvIndex: data.current.uv,\n      date: data.current.last_updated,\n    });\n    console.log(data);\n  };\n\n  const submitRequest = async (location) => {\n    setLoader(true);\n    setError(false);\n\n    const response = await getData(location);\n    if (!response) return;\n\n    const { data } = response;\n    gatherData(data);\n  };\n\n  return {\n    error,\n    loader,\n    weather,\n    submitRequest,\n  };\n};\n\nexport default useWeather;\n"]},"metadata":{},"sourceType":"module"}