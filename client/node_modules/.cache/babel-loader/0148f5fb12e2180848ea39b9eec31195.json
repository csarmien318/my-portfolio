{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst authedSession = cookies.get(\"authedSession\");\nconst isAuthed = cookies.get(\"isAuthed\");\nconst checkUser = localStorage.getItem(\"user\");\naxios.defaults.withCredentials = true;\n\nconst useAuth = () => {\n  _s();\n\n  const [isUser, setIsUser] = useState(isAuthed);\n  const [user, setUser] = useState(checkUser); // const [user, setUser] = useState(localStorage.getItem(\"user\"));\n\n  useEffect(() => {\n    if (checkUser) {\n      console.log(\"checkUser: \", checkUser);\n      const currentUser = JSON.parse(checkUser);\n      setUser(currentUser); // setIsUser(authedSession);\n    } else {\n      setUser();\n      setIsUser(false);\n    }\n  }, []);\n\n  if (isAuthed && !authedSession && checkUser) {\n    handleLogout();\n    alert(\"Session expired, please log in again.\");\n  } // useEffect(() => {\n  //   console.log(\"User: \", user);\n  //   async function getData() {\n  //     if (isAuthed && !authedSession && checkUser) {\n  //       handleLogout();\n  //       alert(\"Session expired, please log in again.\");\n  //       // try {\n  //       //   const response = await axios.post(\"http://localhost:8080/api/auth\", {\n  //       //     withCredentials: true,\n  //       //   });\n  //       //   window.location.reload();\n  //       //   console.log(response.data);\n  //       // } catch (err) {\n  //       //   alert(err);\n  //       //   console.log(err);\n  //       //   window.location.reload();\n  //       //   handleLogout();\n  //       // }\n  //     }\n  //     if (!isAuthed && checkUser) handleLogout();\n  //   }\n  //   getData();\n  // }, [isUser]);\n\n\n  const handleLogin = async (username, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:8080/api/login\", JSON.stringify({\n        username,\n        password\n      }), {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      window.location.reload();\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n      setUser(response.data.user);\n      setIsUser(true);\n    } catch (err) {\n      var _err$response, _err$response2;\n\n      if (!(err !== null && err !== void 0 && err.response)) {\n        alert(\"An unexpected error occurred. Please try again later.\");\n      } else if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 400) {\n        alert(\"Missing Username or Password\");\n      } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        alert(\"Incorrect username or password\");\n        console.log(\"Incorrect username or password\");\n      } else {\n        alert(\"Login Failed\");\n      }\n    }\n  };\n\n  const handleLogout = () => {\n    axios.delete(\"http://localhost:8080/api/clear-cookies\");\n    axios.get(\"http://localhost:8080/api/logout\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredential: true\n    }).then(() => {\n      localStorage.clear();\n      console.log(\"Logged out successfully.\");\n    }).catch(() => {\n      console.log(\"An internal server error has occurred.\");\n    });\n    localStorage.clear();\n    setUser(false);\n  };\n\n  return {\n    user,\n    isUser,\n    setUser,\n    setIsUser,\n    handleLogin,\n    handleLogout\n  };\n};\n\n_s(useAuth, \"e+wBThi4PmLqtdJ1Ph7g9rFbrw4=\");\n\nexport default useAuth; // TODO: Make a function validateInput that checks\n// const validateInput = (username, password) => {\n//   if (!(username has a number && lowercase letters)) {\n//     return false;\n//   }\n//   if (!(password has numbers && has uppercase letters && lowercase letters)) {\n//     return false;\n//   }\n//\n//   return true;\n// }","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/hooks/useAuth.js"],"names":["useState","useEffect","axios","Cookies","cookies","authedSession","get","isAuthed","checkUser","localStorage","getItem","defaults","withCredentials","useAuth","isUser","setIsUser","user","setUser","console","log","currentUser","JSON","parse","handleLogout","alert","handleLogin","username","password","response","post","stringify","headers","window","location","reload","setItem","data","err","status","delete","withCredential","then","clear","catch"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nconst authedSession = cookies.get(\"authedSession\");\nconst isAuthed = cookies.get(\"isAuthed\");\nconst checkUser = localStorage.getItem(\"user\");\n\naxios.defaults.withCredentials = true;\n\nconst useAuth = () => {\n  const [isUser, setIsUser] = useState(isAuthed);\n  const [user, setUser] = useState(checkUser);\n  // const [user, setUser] = useState(localStorage.getItem(\"user\"));\n\n  useEffect(() => {\n    if (checkUser) {\n      console.log(\"checkUser: \", checkUser);\n      const currentUser = JSON.parse(checkUser);\n      setUser(currentUser);\n      // setIsUser(authedSession);\n    } else {\n      setUser();\n      setIsUser(false);\n    }\n  }, []);\n\n  if (isAuthed && !authedSession && checkUser) {\n    handleLogout();\n    alert(\"Session expired, please log in again.\");\n  }\n\n  // useEffect(() => {\n  //   console.log(\"User: \", user);\n  //   async function getData() {\n  //     if (isAuthed && !authedSession && checkUser) {\n  //       handleLogout();\n  //       alert(\"Session expired, please log in again.\");\n\n  //       // try {\n  //       //   const response = await axios.post(\"http://localhost:8080/api/auth\", {\n  //       //     withCredentials: true,\n  //       //   });\n  //       //   window.location.reload();\n  //       //   console.log(response.data);\n  //       // } catch (err) {\n  //       //   alert(err);\n  //       //   console.log(err);\n  //       //   window.location.reload();\n  //       //   handleLogout();\n  //       // }\n  //     }\n\n  //     if (!isAuthed && checkUser) handleLogout();\n  //   }\n  //   getData();\n  // }, [isUser]);\n\n  const handleLogin = async (username, password) => {\n    try {\n      const response = await axios.post(\n        \"http://localhost:8080/api/login\",\n        JSON.stringify({ username, password }),\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n          withCredentials: true,\n        }\n      );\n\n      window.location.reload();\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n\n      setUser(response.data.user);\n      setIsUser(true);\n    } catch (err) {\n      if (!err?.response) {\n        alert(\"An unexpected error occurred. Please try again later.\");\n      } else if (err.response?.status === 400) {\n        alert(\"Missing Username or Password\");\n      } else if (err.response?.status === 401) {\n        alert(\"Incorrect username or password\");\n        console.log(\"Incorrect username or password\");\n      } else {\n        alert(\"Login Failed\");\n      }\n    }\n  };\n\n  const handleLogout = () => {\n    axios.delete(\"http://localhost:8080/api/clear-cookies\");\n    axios\n      .get(\"http://localhost:8080/api/logout\", {\n        headers: { \"Content-Type\": \"application/json\" },\n        withCredential: true,\n      })\n      .then(() => {\n        localStorage.clear();\n        console.log(\"Logged out successfully.\");\n      })\n      .catch(() => {\n        console.log(\"An internal server error has occurred.\");\n      });\n\n    localStorage.clear();\n    setUser(false);\n  };\n\n  return {\n    user,\n    isUser,\n    setUser,\n    setIsUser,\n    handleLogin,\n    handleLogout,\n  };\n};\n\nexport default useAuth;\n\n// TODO: Make a function validateInput that checks\n// const validateInput = (username, password) => {\n//   if (!(username has a number && lowercase letters)) {\n//     return false;\n//   }\n//   if (!(password has numbers && has uppercase letters && lowercase letters)) {\n//     return false;\n//   }\n//\n//   return true;\n// }\n"]},"metadata":{},"sourceType":"module"}