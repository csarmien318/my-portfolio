{"ast":null,"code":"var _jsxFileName = \"/Users/chritsophersarmiento/git/my-portfolio/src/components/SongsTableHeader.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SongsTableHeader = _ref => {\n  let {\n    songs,\n    setAllSongs,\n    sortColumn,\n    setSortColumn\n  } = _ref;\n  const columns = [{\n    path: \"title\",\n    label: \"Song\"\n  }, {\n    path: \"artist\",\n    label: \"Artist\"\n  }, {\n    path: \"album\",\n    label: \"Album\"\n  }, {\n    path: \"songLength\",\n    label: \"Length\"\n  }, {\n    path: \"releaseYear\",\n    label: \"Year Released\"\n  }];\n\n  const handleSort = column => {\n    var order = column !== sortColumn.path ? \"ascending\" : sortColumn.order;\n\n    if (order === \"ascending\") {\n      const sorted = [...songs].sort((a, b) => a[column] > b[column] ? 1 : -1);\n      setAllSongs(sorted);\n      setSortColumn({\n        path: column,\n        order: \"descending\"\n      });\n    }\n\n    if (order === \"descending\") {\n      const sorted = [...songs].sort((a, b) => a[column] < b[column] ? 1 : -1);\n      setAllSongs(sorted);\n      setSortColumn({\n        path: column,\n        order: \"ascending\"\n      });\n    }\n  };\n\n  const displaySortIcon = column => {\n    if (column.path !== sortColumn.path) return null;\n    if (sortColumn.order === \"ascending\") return /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fa fa-sort-desc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fa fa-sort-asc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this);\n  };\n\n  const handleStyle = column => {\n    if (column.label === \"Song\") return {\n      width: \"300px\"\n    };\n    if (column.label === \"Artist\") return {\n      width: \"140px\"\n    };\n    if (column.label === \"Album\") return {\n      width: \"220px\"\n    };\n    if (column.label === \"Length\") return {\n      width: \"130px\"\n    };\n    if (column.label === \"Year Released\") return {\n      width: \"140px\"\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      children: columns.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n        style: handleStyle(column),\n        onClick: () => handleSort(column.path),\n        children: [column.label, \" \", displaySortIcon(column)]\n      }, column.path, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SongsTableHeader;\nexport default SongsTableHeader;\nSongsTableHeader.propTypes = {\n  songs: PropTypes.array.isRequired,\n  setAllSongs: PropTypes.func.isRequired,\n  sortColumn: PropTypes.object.isRequired,\n  setSortColumn: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SongsTableHeader\");","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/components/SongsTableHeader.jsx"],"names":["React","PropTypes","SongsTableHeader","songs","setAllSongs","sortColumn","setSortColumn","columns","path","label","handleSort","column","order","sorted","sort","a","b","displaySortIcon","handleStyle","width","cursor","map","propTypes","array","isRequired","func","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SongsTableHeader = ({\n  songs,\n  setAllSongs,\n  sortColumn,\n  setSortColumn,\n}) => {\n  const columns = [\n    { path: \"title\", label: \"Song\" },\n    { path: \"artist\", label: \"Artist\" },\n    { path: \"album\", label: \"Album\" },\n    { path: \"songLength\", label: \"Length\" },\n    { path: \"releaseYear\", label: \"Year Released\" },\n  ];\n\n  const handleSort = (column) => {\n    var order = column !== sortColumn.path ? \"ascending\" : sortColumn.order;\n    if (order === \"ascending\") {\n      const sorted = [...songs].sort((a, b) =>\n        a[column] > b[column] ? 1 : -1\n      );\n      setAllSongs(sorted);\n      setSortColumn({ path: column, order: \"descending\" });\n    }\n    if (order === \"descending\") {\n      const sorted = [...songs].sort((a, b) =>\n        a[column] < b[column] ? 1 : -1\n      );\n      setAllSongs(sorted);\n      setSortColumn({ path: column, order: \"ascending\" });\n    }\n  };\n\n  const displaySortIcon = (column) => {\n    if (column.path !== sortColumn.path) return null;\n    if (sortColumn.order === \"ascending\")\n      return <i className=\"fa fa-sort-desc\" />;\n    else return <i className=\"fa fa-sort-asc\" />;\n  };\n\n  const handleStyle = (column) => {\n    if (column.label === \"Song\") return { width: \"300px\" };\n    if (column.label === \"Artist\") return { width: \"140px\" };\n    if (column.label === \"Album\") return { width: \"220px\" };\n    if (column.label === \"Length\") return { width: \"130px\" };\n    if (column.label === \"Year Released\") return { width: \"140px\" };\n  };\n\n  return (\n    <thead>\n      <tr style={{ cursor: \"pointer\" }}>\n        {columns.map((column) => (\n          <th\n            key={column.path}\n            style={handleStyle(column)}\n            onClick={() => handleSort(column.path)}\n          >\n            {column.label} {displaySortIcon(column)}\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n};\n\nexport default SongsTableHeader;\n\nSongsTableHeader.propTypes = {\n  songs: PropTypes.array.isRequired,\n  setAllSongs: PropTypes.func.isRequired,\n  sortColumn: PropTypes.object.isRequired,\n  setSortColumn: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}