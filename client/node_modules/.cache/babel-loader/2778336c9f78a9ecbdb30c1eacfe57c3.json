{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst authedSession = cookies.get(\"authedSession\");\nconst authedToken = cookies.get(\"authedToken\");\n\nconst useAuth = () => {\n  _s();\n\n  const [isUser, setIsUser] = useState(authedSession);\n  const [user, setUser] = useState(() => {\n    if (!isUser) return \"\";\n    return localStorage.getItem(\"user\");\n  });\n  useEffect(() => {\n    if (authedToken && authedSession) {\n      const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n      setUser(currentUser);\n      setIsUser(authedSession);\n    } else if (authedToken && !authedSession) {\n      console.log(\"refreshing of tokens needed!\");\n      const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n      setUser(currentUser);\n      setIsUser(authedSession);\n    } else {\n      setUser();\n      setIsUser(false);\n    }\n  }, []);\n\n  const handleLogin = async (username, password, error) => {\n    try {\n      const response = await axios.post(\"/api/login\", JSON.stringify({\n        username,\n        password\n      }), {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user)); // setUser(response.data.user);\n\n      setIsUser(true);\n    } catch (err) {\n      var _err$response, _err$response2;\n\n      if (!(err !== null && err !== void 0 && err.response)) {\n        error = \"No Server Response\"; // setErrorMsg(\"No Server Response\");\n      } else if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 400) {\n        // setErrorMsg(\"Missing Username or Password\");\n        error = \"Missing Username or Password\";\n      } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        error = \"Missing Username or Password\"; // setErrorMsg(\"Incorrect username or password\");\n        // console.log(\"Incorrect username or password\");\n      } else {\n        error = \"Login Failed\"; // setErrorMsg(\"Login Failed\");\n      }\n    }\n  };\n\n  const handleLogout = async () => {\n    await axios.delete(\"/api/logout\", user, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(() => {\n      localStorage.clear();\n      console.log(\"Logged out successfully.\");\n    }).catch(() => {\n      console.log(\"An internal server error has occurred.\");\n    });\n    localStorage.clear();\n    setUser(\"\");\n    setIsUser(false);\n  };\n\n  return {\n    user,\n    isUser,\n    setUser,\n    setIsUser,\n    handleLogin,\n    handleLogout\n  };\n};\n\n_s(useAuth, \"de0lhUgR+kUI0OMxVcPRjGZSBMY=\");\n\nexport default useAuth;","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/hooks/useAuth.js"],"names":["useState","useEffect","axios","Cookies","cookies","authedSession","get","authedToken","useAuth","isUser","setIsUser","user","setUser","localStorage","getItem","currentUser","JSON","parse","console","log","handleLogin","username","password","error","response","post","stringify","headers","setItem","data","err","status","handleLogout","delete","then","clear","catch"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAEA,MAAME,aAAa,GAAGD,OAAO,CAACE,GAAR,CAAY,eAAZ,CAAtB;AACA,MAAMC,WAAW,GAAGH,OAAO,CAACE,GAAR,CAAY,aAAZ,CAApB;;AAEA,MAAME,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAACK,aAAD,CAApC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,MAAM;AACrC,QAAI,CAACS,MAAL,EAAa,OAAO,EAAP;AACb,WAAOI,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAP;AACD,GAH+B,CAAhC;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,WAAW,IAAIF,aAAnB,EAAkC;AAChC,YAAMU,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAApB;AACAF,MAAAA,OAAO,CAACG,WAAD,CAAP;AACAL,MAAAA,SAAS,CAACL,aAAD,CAAT;AACD,KAJD,MAIO,IAAIE,WAAW,IAAI,CAACF,aAApB,EAAmC;AACxCa,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,YAAMJ,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAApB;AACAF,MAAAA,OAAO,CAACG,WAAD,CAAP;AACAL,MAAAA,SAAS,CAACL,aAAD,CAAT;AACD,KALM,MAKA;AACLO,MAAAA,OAAO;AACPF,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF,GAdQ,EAcN,EAdM,CAAT;;AAgBA,QAAMU,WAAW,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,KAA3B,KAAqC;AACvD,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,IAAN,CACrB,YADqB,EAErBT,IAAI,CAACU,SAAL,CAAe;AAAEL,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf,CAFqB,EAGrB;AACEK,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AADX,OAHqB,CAAvB;AAQAd,MAAAA,YAAY,CAACe,OAAb,CAAqB,MAArB,EAA6BZ,IAAI,CAACU,SAAL,CAAeF,QAAQ,CAACK,IAAT,CAAclB,IAA7B,CAA7B,EATE,CAWF;;AACAD,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAbD,CAaE,OAAOoB,GAAP,EAAY;AAAA;;AACZ,UAAI,EAACA,GAAD,aAACA,GAAD,eAACA,GAAG,CAAEN,QAAN,CAAJ,EAAoB;AAClBD,QAAAA,KAAK,GAAG,oBAAR,CADkB,CAElB;AACD,OAHD,MAGO,IAAI,kBAAAO,GAAG,CAACN,QAAJ,gEAAcO,MAAd,MAAyB,GAA7B,EAAkC;AACvC;AACAR,QAAAA,KAAK,GAAG,8BAAR;AACD,OAHM,MAGA,IAAI,mBAAAO,GAAG,CAACN,QAAJ,kEAAcO,MAAd,MAAyB,GAA7B,EAAkC;AACvCR,QAAAA,KAAK,GAAG,8BAAR,CADuC,CAEvC;AACA;AACD,OAJM,MAIA;AACLA,QAAAA,KAAK,GAAG,cAAR,CADK,CAEL;AACD;AACF;AACF,GA9BD;;AAgCA,QAAMS,YAAY,GAAG,YAAY;AAC/B,UAAM9B,KAAK,CACR+B,MADG,CACI,aADJ,EACmBtB,IADnB,EACyB;AAC3BgB,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AADkB,KADzB,EAIHO,IAJG,CAIE,MAAM;AACVrB,MAAAA,YAAY,CAACsB,KAAb;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,KAPG,EAQHiB,KARG,CAQG,MAAM;AACXlB,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACD,KAVG,CAAN;AAYAN,IAAAA,YAAY,CAACsB,KAAb;AACAvB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAF,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAhBD;;AAkBA,SAAO;AACLC,IAAAA,IADK;AAELF,IAAAA,MAFK;AAGLG,IAAAA,OAHK;AAILF,IAAAA,SAJK;AAKLU,IAAAA,WALK;AAMLY,IAAAA;AANK,GAAP;AAQD,CAjFD;;GAAMxB,O;;AAmFN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nconst authedSession = cookies.get(\"authedSession\");\nconst authedToken = cookies.get(\"authedToken\");\n\nconst useAuth = () => {\n  const [isUser, setIsUser] = useState(authedSession);\n  const [user, setUser] = useState(() => {\n    if (!isUser) return \"\";\n    return localStorage.getItem(\"user\");\n  });\n\n  useEffect(() => {\n    if (authedToken && authedSession) {\n      const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n      setUser(currentUser);\n      setIsUser(authedSession);\n    } else if (authedToken && !authedSession) {\n      console.log(\"refreshing of tokens needed!\");\n      const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n      setUser(currentUser);\n      setIsUser(authedSession);\n    } else {\n      setUser();\n      setIsUser(false);\n    }\n  }, []);\n\n  const handleLogin = async (username, password, error) => {\n    try {\n      const response = await axios.post(\n        \"/api/login\",\n        JSON.stringify({ username, password }),\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n\n      // setUser(response.data.user);\n      setIsUser(true);\n    } catch (err) {\n      if (!err?.response) {\n        error = \"No Server Response\";\n        // setErrorMsg(\"No Server Response\");\n      } else if (err.response?.status === 400) {\n        // setErrorMsg(\"Missing Username or Password\");\n        error = \"Missing Username or Password\";\n      } else if (err.response?.status === 401) {\n        error = \"Missing Username or Password\";\n        // setErrorMsg(\"Incorrect username or password\");\n        // console.log(\"Incorrect username or password\");\n      } else {\n        error = \"Login Failed\";\n        // setErrorMsg(\"Login Failed\");\n      }\n    }\n  };\n\n  const handleLogout = async () => {\n    await axios\n      .delete(\"/api/logout\", user, {\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n      .then(() => {\n        localStorage.clear();\n        console.log(\"Logged out successfully.\");\n      })\n      .catch(() => {\n        console.log(\"An internal server error has occurred.\");\n      });\n\n    localStorage.clear();\n    setUser(\"\");\n    setIsUser(false);\n  };\n\n  return {\n    user,\n    isUser,\n    setUser,\n    setIsUser,\n    handleLogin,\n    handleLogout,\n  };\n};\n\nexport default useAuth;\n"]},"metadata":{},"sourceType":"module"}