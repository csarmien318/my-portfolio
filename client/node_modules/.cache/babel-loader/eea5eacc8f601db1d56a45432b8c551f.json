{"ast":null,"code":"\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n  var nameValue = parts.shift().split(\"=\");\n  var name = nameValue.shift();\n  var value = nameValue.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\", e);\n  }\n\n  var cookie = {\n    name: name,\n    // grab everything before the first =\n    value: value\n  };\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n  return cookie;\n}\n\nfunction parse(input, options) {\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers && input.headers[\"set-cookie\"]) {\n    // fast-path for node.js (which automatically normalizes header names to lower-case\n    input = input.headers[\"set-cookie\"];\n  } else if (input.headers) {\n    // slow-path for other environments - see #25\n    var sch = input.headers[Object.keys(input.headers).find(function (key) {\n      return key.toLowerCase() === \"set-cookie\";\n    })]; // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n\n    if (!sch && input.headers.cookie && !options.silent) {\n      console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n    }\n\n    input = sch;\n  }\n\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\n\n\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        } // currently special character\n\n\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true; // pos is inside the next cookie, so back up and return it.\n\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/client/node_modules/set-cookie-parser/lib/set-cookie.js"],"names":["defaultParseOptions","decodeValues","map","silent","isNonEmptyString","str","trim","parseString","setCookieValue","options","parts","split","filter","nameValue","shift","name","value","join","Object","assign","decodeURIComponent","e","console","error","cookie","forEach","part","sides","key","trimLeft","toLowerCase","expires","Date","maxAge","parseInt","secure","httpOnly","sameSite","parse","input","headers","sch","keys","find","warn","Array","isArray","cookies","reduce","splitCookiesString","cookiesString","cookiesStrings","pos","start","ch","lastComma","nextStart","cookiesSeparatorFound","skipWhitespace","length","test","charAt","notSpecialChar","push","substring","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n  var nameValue = parts.shift().split(\"=\");\n  var name = nameValue.shift();\n  var value = nameValue.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name, // grab everything before the first =\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers && input.headers[\"set-cookie\"]) {\n    // fast-path for node.js (which automatically normalizes header names to lower-case\n    input = input.headers[\"set-cookie\"];\n  } else if (input.headers) {\n    // slow-path for other environments - see #25\n    var sch =\n      input.headers[\n        Object.keys(input.headers).find(function (key) {\n          return key.toLowerCase() === \"set-cookie\";\n        })\n      ];\n    // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n    if (!sch && input.headers.cookie && !options.silent) {\n      console.warn(\n        \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n      );\n    }\n    input = sch;\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n"]},"metadata":{},"sourceType":"script"}