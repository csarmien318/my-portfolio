{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { omit } from \"lodash\";\nexport const useContact = callback => {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n  useEffect(() => {\n    console.log(\"COMING FROM useContact\");\n    setSubmitted(false);\n  }, [values]);\n\n  const validate = (name, value) => {\n    switch (name) {\n      case \"username\":\n        if (value.length <= 1) {\n          setErrors({ ...errors,\n            username: \"Your name must contain at least 2 letters\"\n          });\n        } else {\n          let newObj = omit(errors, \"username\");\n          setErrors(newObj);\n        }\n\n        break;\n\n      case \"email\":\n        if (!new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/).test(value)) {\n          setErrors({ ...errors,\n            email: \"Please enter a valid email (ex: johndoe@email.com)\"\n          });\n        } else {\n          let newObj = omit(errors, \"email\");\n          setErrors(newObj);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleChange = e => {\n    e.persist();\n    let name = e.target.name;\n    let val = e.target.value;\n    validate(name, val);\n    setValues({ ...values,\n      [name]: val\n    });\n  };\n\n  const handleSubmit = e => {\n    if (e) e.preventDefault();\n\n    if (Object.keys(errors).length === 0) {\n      setSubmitted(true);\n      callback();\n    } else {\n      alert(\"Form was not submitted. Make sure required fields were filled correctly.\");\n    }\n  };\n\n  return {\n    values,\n    errors,\n    submitted,\n    handleChange,\n    handleSubmit\n  };\n};\n\n_s(useContact, \"WIHcVG62ike2fy7xBNWzW8tF3lc=\");","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/hooks/useContact.js"],"names":["useState","useEffect","omit","useContact","callback","values","setValues","errors","setErrors","submitted","setSubmitted","console","log","validate","name","value","length","username","newObj","RegExp","test","email","handleChange","e","persist","target","val","handleSubmit","preventDefault","Object","keys","alert"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAO,MAAMC,UAAU,GAAIC,QAAD,IAAc;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHQ,EAGN,CAACL,MAAD,CAHM,CAAT;;AAKA,QAAMQ,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,YAAQD,IAAR;AACE,WAAK,UAAL;AACE,YAAIC,KAAK,CAACC,MAAN,IAAgB,CAApB,EAAuB;AACrBR,UAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAERU,YAAAA,QAAQ,EAAE;AAFF,WAAD,CAAT;AAID,SALD,MAKO;AACL,cAAIC,MAAM,GAAGhB,IAAI,CAACK,MAAD,EAAS,UAAT,CAAjB;AACAC,UAAAA,SAAS,CAACU,MAAD,CAAT;AACD;;AAED;;AAEF,WAAK,OAAL;AACE,YACE,CAAC,IAAIC,MAAJ,CACC,wJADD,EAECC,IAFD,CAEML,KAFN,CADH,EAIE;AACAP,UAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAERc,YAAAA,KAAK,EAAE;AAFC,WAAD,CAAT;AAID,SATD,MASO;AACL,cAAIH,MAAM,GAAGhB,IAAI,CAACK,MAAD,EAAS,OAAT,CAAjB;AACAC,UAAAA,SAAS,CAACU,MAAD,CAAT;AACD;;AACD;;AACF;AACE;AA9BJ;AAgCD,GAjCD;;AAmCA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,OAAF;AAEA,QAAIV,IAAI,GAAGS,CAAC,CAACE,MAAF,CAASX,IAApB;AACA,QAAIY,GAAG,GAAGH,CAAC,CAACE,MAAF,CAASV,KAAnB;AAEAF,IAAAA,QAAQ,CAACC,IAAD,EAAOY,GAAP,CAAR;AAEApB,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACS,IAAD,GAAQY;AAFA,KAAD,CAAT;AAID,GAZD;;AAcA,QAAMC,YAAY,GAAIJ,CAAD,IAAO;AAC1B,QAAIA,CAAJ,EAAOA,CAAC,CAACK,cAAF;;AACP,QAAIC,MAAM,CAACC,IAAP,CAAYvB,MAAZ,EAAoBS,MAApB,KAA+B,CAAnC,EAAsC;AACpCN,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAN,MAAAA,QAAQ;AACT,KAHD,MAGO;AACL2B,MAAAA,KAAK,CACH,0EADG,CAAL;AAGD;AACF,GAVD;;AAYA,SAAO;AACL1B,IAAAA,MADK;AAELE,IAAAA,MAFK;AAGLE,IAAAA,SAHK;AAILa,IAAAA,YAJK;AAKLK,IAAAA;AALK,GAAP;AAOD,CA9EM;;GAAMxB,U","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { omit } from \"lodash\";\n\nexport const useContact = (callback) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n    console.log(\"COMING FROM useContact\");\n    setSubmitted(false);\n  }, [values]);\n\n  const validate = (name, value) => {\n    switch (name) {\n      case \"username\":\n        if (value.length <= 1) {\n          setErrors({\n            ...errors,\n            username: \"Your name must contain at least 2 letters\",\n          });\n        } else {\n          let newObj = omit(errors, \"username\");\n          setErrors(newObj);\n        }\n\n        break;\n\n      case \"email\":\n        if (\n          !new RegExp(\n            /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n          ).test(value)\n        ) {\n          setErrors({\n            ...errors,\n            email: \"Please enter a valid email (ex: johndoe@email.com)\",\n          });\n        } else {\n          let newObj = omit(errors, \"email\");\n          setErrors(newObj);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleChange = (e) => {\n    e.persist();\n\n    let name = e.target.name;\n    let val = e.target.value;\n\n    validate(name, val);\n\n    setValues({\n      ...values,\n      [name]: val,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    if (e) e.preventDefault();\n    if (Object.keys(errors).length === 0) {\n      setSubmitted(true);\n      callback();\n    } else {\n      alert(\n        \"Form was not submitted. Make sure required fields were filled correctly.\"\n      );\n    }\n  };\n\n  return {\n    values,\n    errors,\n    submitted,\n    handleChange,\n    handleSubmit,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}