{"ast":null,"code":"import { rest } from \"msw\";\nexport const handlers = [rest.get(\"http://localhost:8080/api/songs\", (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json([{\n    _id: \"mockId\",\n    title: \"mockTitle\",\n    artist: \"mockArtist\",\n    album: \"mockAlbum\",\n    songLength: \"mockLength\",\n    releaseYear: \"mockReleaseYear\"\n  }]));\n}), rest.get(\"http://localhost:8080/api/songs\", (req, res, ctx) => {\n  return res(ctx.status(500));\n}), // const values = {\n//   name: \"mockName\",\n//   company: \"mockCompany\",\n//   email: \"mockEmail@mock.com\",\n//   message: \"Mock message.\",\n// };\nrest.post(\"http://localhost:8080/api/save\", async (req, res, ctx) => {\n  return res(ctx.delay(500), ctx.json({\n    msg: \"Data has been saved!\"\n  }));\n}), rest.post(\"http://localhost:8080/api/save\", (req, res, ctx) => {\n  return res(ctx.status(500), ctx.json({\n    msg: \"Sorry, an internal server error has occurred\"\n  }));\n}), rest.post(\"http://localhost:8080/api/auth\", (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json({\n    mockToken: \"mockToken\"\n  }));\n}), rest.post(\"http://localhost:8080/api/auth\", (req, res, ctx) => {\n  return res(ctx.status(401));\n}), rest.post(\"http://localhost:8080/api/login\", (req, res, ctx) => {\n  const mockToken = \"mockToken\";\n  const user = {\n    username: \"mockUsername\"\n  };\n  return res(ctx.cookie(\"mockToken\", mockToken, {\n    expires: new Date(new Date().getTime() + 31557600000),\n    origin: \"http://localhost:3000\",\n    sameSite: \"strict\",\n    secure: true,\n    httpOnly: true\n  }), ctx.status(202), ctx.json({\n    user\n  }));\n}), rest.post(\"http://localhost:8080/api/logout\", (req, res, ctx) => {\n  return res(ctx.json(\"mockLogout Success\"));\n}), rest.post(\"http://localhost:8080/api/clear-cookies\", (req, res, ctx) => {\n  return res(ctx.json(\"mockLogout Success\"));\n})];","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/mocks/handlers.js"],"names":["rest","handlers","get","req","res","ctx","status","json","_id","title","artist","album","songLength","releaseYear","post","delay","msg","mockToken","user","username","cookie","expires","Date","getTime","origin","sameSite","secure","httpOnly"],"mappings":"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","sourcesContent":["import { rest } from \"msw\";\n\nexport const handlers = [\n  rest.get(\"http://localhost:8080/api/songs\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json([\n        {\n          _id: \"mockId\",\n          title: \"mockTitle\",\n          artist: \"mockArtist\",\n          album: \"mockAlbum\",\n          songLength: \"mockLength\",\n          releaseYear: \"mockReleaseYear\",\n        },\n      ])\n    );\n  }),\n\n  rest.get(\"http://localhost:8080/api/songs\", (req, res, ctx) => {\n    return res(ctx.status(500));\n  }),\n\n  // const values = {\n  //   name: \"mockName\",\n  //   company: \"mockCompany\",\n  //   email: \"mockEmail@mock.com\",\n  //   message: \"Mock message.\",\n  // };\n\n  rest.post(\"http://localhost:8080/api/save\", async (req, res, ctx) => {\n    return res(\n      ctx.delay(500),\n      ctx.json({\n        msg: \"Data has been saved!\",\n      })\n    );\n  }),\n\n  rest.post(\"http://localhost:8080/api/save\", (req, res, ctx) => {\n    return res(\n      ctx.status(500),\n      ctx.json({\n        msg: \"Sorry, an internal server error has occurred\",\n      })\n    );\n  }),\n\n  rest.post(\"http://localhost:8080/api/auth\", (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({ mockToken: \"mockToken\" }));\n  }),\n\n  rest.post(\"http://localhost:8080/api/auth\", (req, res, ctx) => {\n    return res(ctx.status(401));\n  }),\n\n  rest.post(\"http://localhost:8080/api/login\", (req, res, ctx) => {\n    const mockToken = \"mockToken\";\n    const user = {\n      username: \"mockUsername\",\n    };\n    return res(\n      ctx.cookie(\"mockToken\", mockToken, {\n        expires: new Date(new Date().getTime() + 31557600000),\n        origin: \"http://localhost:3000\",\n        sameSite: \"strict\",\n        secure: true,\n        httpOnly: true,\n      }),\n      ctx.status(202),\n      ctx.json({ user })\n    );\n  }),\n\n  rest.post(\"http://localhost:8080/api/logout\", (req, res, ctx) => {\n    return res(ctx.json(\"mockLogout Success\"));\n  }),\n\n  rest.post(\"http://localhost:8080/api/clear-cookies\", (req, res, ctx) => {\n    return res(ctx.json(\"mockLogout Success\"));\n  }),\n];\n"]},"metadata":{},"sourceType":"module"}