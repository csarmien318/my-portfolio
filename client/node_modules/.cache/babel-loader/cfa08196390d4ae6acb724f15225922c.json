{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst authedSession = cookies.get(\"authedSession\");\nconst authedToken = cookies.get(\"authedToken\");\n\nconst useAuth = () => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [isUser, setIsUser] = useState(authedSession);\n  const [user, setUser] = useState(\"\"); // const [user, setUser] = useState(() => {\n  //   if (!isUser) return \"\";\n  //   return localStorage.getItem(\"user\");\n  // });\n  // useEffect(() => {\n  //   if (authedSession) {\n  //     const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n  //     setUser(currentUser);\n  //     setIsUser(authedSession);\n  //   } else {\n  //     setUser();\n  //     setIsUser(false);\n  //   }\n  // }, []);\n\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post(\"/api/login\", JSON.stringify({\n        username,\n        password\n      }), {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    } catch (err) {\n      var _err$response, _err$response2;\n\n      if (!(err !== null && err !== void 0 && err.response)) {\n        setErrorMsg(\"No Server Response\");\n      } else if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 400) {\n        setErrorMsg(\"Missing Username or Password\");\n      } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        setErrorMsg(\"Incorrect username or password\");\n        console.log(\"Incorrect username or password\");\n      } else {\n        setErrorMsg(\"Login Failed\");\n      }\n    }\n\n    localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n  };\n\n  const handleLogout = async () => {\n    await axios.delete(\"/api/logout\", user, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(() => {\n      console.log(\"Logged out successfully.\");\n    }).catch(() => {\n      console.log(\"An internal server error has occurred.\");\n    });\n  };\n\n  return {\n    user,\n    isUser,\n    username,\n    password,\n    errorMsg,\n    setUsername,\n    setPassword,\n    handleLogin,\n    handleLogout,\n    setUser,\n    setIsUser\n  };\n};\n\n_s(useAuth, \"549vwsEGV7o89AMkVuRYyQhql8o=\");\n\nexport default useAuth; // TODO:\n// const isValid = validateInput(username, password);\n// if (!isValid) setErrorMsg(\"Incorrect username or password\");\n// else {\n//   ...make api call...\n// }\n// TODO: Make a function validateInput that checks\n// const validateInput = (username, password) => {\n//   if (!(username has a number && lowercase letters)) {\n//     return false;\n//   }\n//   if (!(password has numbers && has uppercase letters && lowercase letters)) {\n//     return false;\n//   }\n//\n//   return true;\n// }","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/hooks/useAuth.js"],"names":["useState","useEffect","axios","Cookies","cookies","authedSession","get","authedToken","useAuth","username","setUsername","password","setPassword","errorMsg","setErrorMsg","isUser","setIsUser","user","setUser","handleLogin","response","post","JSON","stringify","headers","err","status","console","log","localStorage","setItem","data","handleLogout","delete","then","catch"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nconst authedSession = cookies.get(\"authedSession\");\nconst authedToken = cookies.get(\"authedToken\");\n\nconst useAuth = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [isUser, setIsUser] = useState(authedSession);\n  const [user, setUser] = useState(\"\");\n  // const [user, setUser] = useState(() => {\n  //   if (!isUser) return \"\";\n  //   return localStorage.getItem(\"user\");\n  // });\n\n  // useEffect(() => {\n  //   if (authedSession) {\n  //     const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n  //     setUser(currentUser);\n  //     setIsUser(authedSession);\n  //   } else {\n  //     setUser();\n  //     setIsUser(false);\n  //   }\n  // }, []);\n\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post(\n        \"/api/login\",\n        JSON.stringify({ username, password }),\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n    } catch (err) {\n      if (!err?.response) {\n        setErrorMsg(\"No Server Response\");\n      } else if (err.response?.status === 400) {\n        setErrorMsg(\"Missing Username or Password\");\n      } else if (err.response?.status === 401) {\n        setErrorMsg(\"Incorrect username or password\");\n        console.log(\"Incorrect username or password\");\n      } else {\n        setErrorMsg(\"Login Failed\");\n      }\n    }\n    localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n  };\n\n  const handleLogout = async () => {\n    await axios\n      .delete(\"/api/logout\", user, {\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n      .then(() => {\n        console.log(\"Logged out successfully.\");\n      })\n      .catch(() => {\n        console.log(\"An internal server error has occurred.\");\n      });\n  };\n\n  return {\n    user,\n    isUser,\n    username,\n    password,\n    errorMsg,\n    setUsername,\n    setPassword,\n    handleLogin,\n    handleLogout,\n    setUser,\n    setIsUser,\n  };\n};\n\nexport default useAuth;\n\n// TODO:\n// const isValid = validateInput(username, password);\n// if (!isValid) setErrorMsg(\"Incorrect username or password\");\n// else {\n//   ...make api call...\n// }\n\n// TODO: Make a function validateInput that checks\n// const validateInput = (username, password) => {\n//   if (!(username has a number && lowercase letters)) {\n//     return false;\n//   }\n//   if (!(password has numbers && has uppercase letters && lowercase letters)) {\n//     return false;\n//   }\n//\n//   return true;\n// }\n"]},"metadata":{},"sourceType":"module"}