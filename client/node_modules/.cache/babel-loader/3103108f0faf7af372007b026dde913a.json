{"ast":null,"code":"var _jsxFileName = \"/Users/chritsophersarmiento/git/my-portfolio/src/pages/Songs.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Page } from \"../components/Page\";\nimport { SongsListGroup } from \"../components/SongsListGroup\";\nimport { SongsTable } from \"../components/SongsTable\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Songs = () => {\n  _s();\n\n  const [getApiSongs, setApiSongs] = useState([]);\n  const [allSongs, setAllSongs] = useState([]);\n  const [selectedArtist, setSelectedArtist] = useState(\"All Artists\");\n  const [pageNumber, setPageNumber] = useState(0);\n  const [sortColumn, setSortColumn] = useState({\n    path: \"\",\n    order: \"ascending\"\n  });\n  useEffect(() => {\n    getSongsData();\n  }, []);\n  useEffect(() => {\n    setAllSongs(getApiSongs);\n    setPageNumber(0);\n    setSortColumn({\n      path: \"\",\n      order: \"ascending\"\n    });\n  }, [selectedArtist]);\n\n  const getSongsData = () => {\n    axios.get(\"/api/songs\").then(response => {\n      const songsData = response.data;\n      setAllSongs(songsData);\n      setApiSongs(songsData);\n      console.log(\"Songs data has been received\");\n    }).catch(() => {\n      alert(\"The table was not populated with songs because there was an error retrieving the data.\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Tabled Data\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      style: {\n        maxWidth: \"2000px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 3,\n          md: 2,\n          children: /*#__PURE__*/_jsxDEV(SongsListGroup, {\n            onArtistSelect: setSelectedArtist,\n            selectedArtist: selectedArtist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 9,\n          md: 10,\n          children: /*#__PURE__*/_jsxDEV(SongsTable, {\n            allSongs: allSongs,\n            setAllSongs: setAllSongs,\n            selectedArtist: selectedArtist,\n            pageNumber: pageNumber,\n            setPageNumber: setPageNumber,\n            sortColumn: sortColumn,\n            setSortColumn: setSortColumn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Songs, \"JETU+zEQ2+GzSM5x7RosmQB95Vw=\");\n\n_c = Songs;\nexport default Songs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Songs\");","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/pages/Songs.jsx"],"names":["React","useState","useEffect","axios","Page","SongsListGroup","SongsTable","Col","Container","Row","Songs","getApiSongs","setApiSongs","allSongs","setAllSongs","selectedArtist","setSelectedArtist","pageNumber","setPageNumber","sortColumn","setSortColumn","path","order","getSongsData","get","then","response","songsData","data","console","log","catch","alert","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Page } from \"../components/Page\";\nimport { SongsListGroup } from \"../components/SongsListGroup\";\nimport { SongsTable } from \"../components/SongsTable\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\nconst Songs = () => {\n  const [getApiSongs, setApiSongs] = useState([]);\n  const [allSongs, setAllSongs] = useState([]);\n  const [selectedArtist, setSelectedArtist] = useState(\"All Artists\");\n  const [pageNumber, setPageNumber] = useState(0);\n  const [sortColumn, setSortColumn] = useState({\n    path: \"\",\n    order: \"ascending\",\n  });\n\n  useEffect(() => {\n    getSongsData();\n  }, []);\n\n  useEffect(() => {\n    setAllSongs(getApiSongs);\n    setPageNumber(0);\n    setSortColumn({ path: \"\", order: \"ascending\" });\n  }, [selectedArtist]);\n\n  const getSongsData = () => {\n    axios\n      .get(\"/api/songs\")\n      .then((response) => {\n        const songsData = response.data;\n        setAllSongs(songsData);\n        setApiSongs(songsData);\n        console.log(\"Songs data has been received\");\n      })\n      .catch(() => {\n        alert(\n          \"The table was not populated with songs because there was an error retrieving the data.\"\n        );\n      });\n  };\n\n  return (\n    <Page title=\"Tabled Data\">\n      <Container fluid style={{ maxWidth: \"2000px\" }}>\n        <Row>\n          <Col xs={3} md={2}>\n            <SongsListGroup\n              onArtistSelect={setSelectedArtist}\n              selectedArtist={selectedArtist}\n            />\n          </Col>\n          <Col xs={9} md={10}>\n            <SongsTable\n              allSongs={allSongs}\n              setAllSongs={setAllSongs}\n              selectedArtist={selectedArtist}\n              pageNumber={pageNumber}\n              setPageNumber={setPageNumber}\n              sortColumn={sortColumn}\n              setSortColumn={setSortColumn}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </Page>\n  );\n};\n\nexport default Songs;\n"]},"metadata":{},"sourceType":"module"}