{"ast":null,"code":"import _toConsumableArray from\"/Users/chritsophersarmiento/git/my-portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var SongsTableHeader=function SongsTableHeader(_ref){var songs=_ref.songs,setAllSongs=_ref.setAllSongs,sortColumn=_ref.sortColumn,setSortColumn=_ref.setSortColumn;var columns=[{path:\"title\",label:\"Song\"},{path:\"artist\",label:\"Artist\"},{path:\"album\",label:\"Album\"},{path:\"songLength\",label:\"Length\"},{path:\"releaseYear\",label:\"Year Released\"}];var handleSort=function handleSort(column){var order=column!==sortColumn.path?\"ascending\":sortColumn.order;if(order===\"ascending\"){var sorted=_toConsumableArray(songs).sort(function(a,b){return a[column]>b[column]?1:-1;});setAllSongs(sorted);setSortColumn({path:column,order:\"descending\"});}if(order===\"descending\"){var _sorted=_toConsumableArray(songs).sort(function(a,b){return a[column]<b[column]?1:-1;});setAllSongs(_sorted);setSortColumn({path:column,order:\"ascending\"});}};var displayHeaders=function displayHeaders(columns){return columns.map(function(column){return/*#__PURE__*/_jsxs(\"th\",{style:handleStyle(column),onClick:function onClick(){return handleSort(column.path);},children:[column.label,\" \",displaySortIcon(column)]},column.path);});};var displaySortIcon=function displaySortIcon(column){if(column.path!==sortColumn.path)return null;if(sortColumn.order===\"ascending\")return/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-sort-desc\"});else return/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-sort-asc\"});};var handleStyle=function handleStyle(column){if(column.label===\"Song\")return{width:\"300px\"};if(column.label===\"Artist\")return{width:\"140px\"};if(column.label===\"Album\")return{width:\"220px\"};if(column.label===\"Length\")return{width:\"130px\"};if(column.label===\"Year Released\")return{width:\"140px\"};};return/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{style:{cursor:\"pointer\"},children:displayHeaders(columns)})});};export default SongsTableHeader;","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/components/SongsTableHeader.jsx"],"names":["React","SongsTableHeader","songs","setAllSongs","sortColumn","setSortColumn","columns","path","label","handleSort","column","order","sorted","sort","a","b","displayHeaders","map","handleStyle","displaySortIcon","width","cursor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SongsTableHeader = ({\n  songs,\n  setAllSongs,\n  sortColumn,\n  setSortColumn,\n}) => {\n  const columns = [\n    { path: \"title\", label: \"Song\" },\n    { path: \"artist\", label: \"Artist\" },\n    { path: \"album\", label: \"Album\" },\n    { path: \"songLength\", label: \"Length\" },\n    { path: \"releaseYear\", label: \"Year Released\" },\n  ];\n\n  const handleSort = (column) => {\n    var order = column !== sortColumn.path ? \"ascending\" : sortColumn.order;\n    if (order === \"ascending\") {\n      const sorted = [...songs].sort((a, b) =>\n        a[column] > b[column] ? 1 : -1\n      );\n      setAllSongs(sorted);\n      setSortColumn({ path: column, order: \"descending\" });\n    }\n    if (order === \"descending\") {\n      const sorted = [...songs].sort((a, b) =>\n        a[column] < b[column] ? 1 : -1\n      );\n      setAllSongs(sorted);\n      setSortColumn({ path: column, order: \"ascending\" });\n    }\n  };\n\n  const displayHeaders = (columns) => {\n    return columns.map((column) => (\n      <th\n        key={column.path}\n        style={handleStyle(column)}\n        onClick={() => handleSort(column.path)}\n      >\n        {column.label} {displaySortIcon(column)}\n      </th>\n    ));\n  };\n\n  const displaySortIcon = (column) => {\n    if (column.path !== sortColumn.path) return null;\n    if (sortColumn.order === \"ascending\")\n      return <i className=\"fa fa-sort-desc\" />;\n    else return <i className=\"fa fa-sort-asc\" />;\n  };\n\n  const handleStyle = (column) => {\n    if (column.label === \"Song\") return { width: \"300px\" };\n    if (column.label === \"Artist\") return { width: \"140px\" };\n    if (column.label === \"Album\") return { width: \"220px\" };\n    if (column.label === \"Length\") return { width: \"130px\" };\n    if (column.label === \"Year Released\") return { width: \"140px\" };\n  };\n\n  return (\n    <thead>\n      <tr style={{ cursor: \"pointer\" }}>{displayHeaders(columns)}</tr>\n    </thead>\n  );\n};\n\nexport default SongsTableHeader;\n\nSongsTableHeader.propTypes = {\n  songs: PropTypes.array.isRequired,\n  setAllSongs: PropTypes.func.isRequired,\n  sortColumn: PropTypes.object.isRequired,\n  setSortColumn: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}