{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst authedSession = cookies.get(\"authedSession\");\nconst isAuthed = cookies.get(\"isAuthed\");\naxios.defaults.withCredentials = true;\n\nconst useAuth = () => {\n  _s();\n\n  const [isUser, setIsUser] = useState(false);\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\n  const checkUser = localStorage.getItem(\"user\");\n  useEffect(() => {\n    function getData() {\n      return axios.post(\"http://localhost:8080/api/auth\", {\n        withCredentials: true\n      }).then(response => {\n        if (response) {\n          setUser(checkUser);\n          setIsUser(true); // return response.data;\n        } // return setIsUser(false);\n\n      });\n    }\n\n    getData();\n  }, []);\n  useEffect(() => {\n    if (checkUser) {\n      console.log(\"checkUser: \", checkUser);\n      const currentUser = JSON.parse(checkUser);\n      setUser(currentUser); // setIsUser(authedSession);\n    } else {\n      setUser(); // setIsUser(false);\n    }\n  }, [isUser]); // useEffect(() => {\n  //   console.log(\"User: \", user);\n  //   async function getData() {\n  //     if (isAuthed && !authedSession && checkUser) {\n  //       try {\n  //         const response = await axios.post(\"http://localhost:8080/api/auth\", {\n  //           withCredentials: true,\n  //         });\n  //         window.location.reload();\n  //         console.log(response.data);\n  //       } catch (err) {\n  //         handleLogout();\n  //         // window.location.reload();\n  //         alert(err);\n  //         console.log(err);\n  //       }\n  //     }\n  //     if (!isAuthed && checkUser) handleLogout();\n  //   }\n  //   getData();\n  // });\n\n  const handleLogin = async (username, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:8080/api/login\", JSON.stringify({\n        username,\n        password\n      }), {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      window.location.reload();\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n      setUser(response.data.user);\n      setIsUser(true);\n    } catch (err) {\n      var _err$response, _err$response2;\n\n      if (!(err !== null && err !== void 0 && err.response)) {\n        alert(\"An unexpected error occurred. Please try again later.\");\n      } else if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 400) {\n        alert(\"Missing Username or Password\");\n      } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        alert(\"Incorrect username or password\");\n        console.log(\"Incorrect username or password\");\n      } else {\n        alert(\"Login Failed\");\n      }\n    }\n  };\n\n  const handleLogout = () => {\n    axios.delete(\"http://localhost:8080/api/clear-cookies\");\n    axios.get(\"http://localhost:8080/api/logout\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredential: true\n    }).then(() => {\n      localStorage.clear();\n      console.log(\"Logged out successfully.\");\n    }).catch(() => {\n      console.log(\"An internal server error has occurred.\");\n    });\n    localStorage.clear();\n    setUser(false);\n  };\n\n  return {\n    user,\n    isUser,\n    setUser,\n    setIsUser,\n    handleLogin,\n    handleLogout\n  };\n};\n\n_s(useAuth, \"XK0X7Qt7qFNoMWBQ3ZDzcwZhJJQ=\");\n\nexport default useAuth; // TODO: Make a function validateInput that checks\n// const validateInput = (username, password) => {\n//   if (!(username has a number && lowercase letters)) {\n//     return false;\n//   }\n//   if (!(password has numbers && has uppercase letters && lowercase letters)) {\n//     return false;\n//   }\n//\n//   return true;\n// }","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/src/hooks/useAuth.js"],"names":["useState","useEffect","axios","Cookies","cookies","authedSession","get","isAuthed","defaults","withCredentials","useAuth","isUser","setIsUser","user","setUser","localStorage","getItem","checkUser","getData","post","then","response","console","log","currentUser","JSON","parse","handleLogin","username","password","stringify","headers","window","location","reload","setItem","data","err","alert","status","handleLogout","delete","withCredential","clear","catch"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nconst authedSession = cookies.get(\"authedSession\");\nconst isAuthed = cookies.get(\"isAuthed\");\n\naxios.defaults.withCredentials = true;\n\nconst useAuth = () => {\n  const [isUser, setIsUser] = useState(false);\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\n  const checkUser = localStorage.getItem(\"user\");\n\n  useEffect(() => {\n    function getData() {\n      return axios\n        .post(\"http://localhost:8080/api/auth\", {\n          withCredentials: true,\n        })\n        .then((response) => {\n          if (response) {\n            setUser(checkUser);\n            setIsUser(true);\n            // return response.data;\n          }\n          // return setIsUser(false);\n        });\n    }\n    getData();\n  }, []);\n\n  useEffect(() => {\n    if (checkUser) {\n      console.log(\"checkUser: \", checkUser);\n      const currentUser = JSON.parse(checkUser);\n      setUser(currentUser);\n      // setIsUser(authedSession);\n    } else {\n      setUser();\n      // setIsUser(false);\n    }\n  }, [isUser]);\n  // useEffect(() => {\n  //   console.log(\"User: \", user);\n  //   async function getData() {\n  //     if (isAuthed && !authedSession && checkUser) {\n  //       try {\n  //         const response = await axios.post(\"http://localhost:8080/api/auth\", {\n  //           withCredentials: true,\n  //         });\n  //         window.location.reload();\n  //         console.log(response.data);\n  //       } catch (err) {\n  //         handleLogout();\n  //         // window.location.reload();\n  //         alert(err);\n  //         console.log(err);\n  //       }\n  //     }\n\n  //     if (!isAuthed && checkUser) handleLogout();\n  //   }\n  //   getData();\n  // });\n\n  const handleLogin = async (username, password) => {\n    try {\n      const response = await axios.post(\n        \"http://localhost:8080/api/login\",\n        JSON.stringify({ username, password }),\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n          withCredentials: true,\n        }\n      );\n\n      window.location.reload();\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n\n      setUser(response.data.user);\n      setIsUser(true);\n    } catch (err) {\n      if (!err?.response) {\n        alert(\"An unexpected error occurred. Please try again later.\");\n      } else if (err.response?.status === 400) {\n        alert(\"Missing Username or Password\");\n      } else if (err.response?.status === 401) {\n        alert(\"Incorrect username or password\");\n        console.log(\"Incorrect username or password\");\n      } else {\n        alert(\"Login Failed\");\n      }\n    }\n  };\n\n  const handleLogout = () => {\n    axios.delete(\"http://localhost:8080/api/clear-cookies\");\n    axios\n      .get(\"http://localhost:8080/api/logout\", {\n        headers: { \"Content-Type\": \"application/json\" },\n        withCredential: true,\n      })\n      .then(() => {\n        localStorage.clear();\n        console.log(\"Logged out successfully.\");\n      })\n      .catch(() => {\n        console.log(\"An internal server error has occurred.\");\n      });\n\n    localStorage.clear();\n    setUser(false);\n  };\n\n  return {\n    user,\n    isUser,\n    setUser,\n    setIsUser,\n    handleLogin,\n    handleLogout,\n  };\n};\n\nexport default useAuth;\n\n// TODO: Make a function validateInput that checks\n// const validateInput = (username, password) => {\n//   if (!(username has a number && lowercase letters)) {\n//     return false;\n//   }\n//   if (!(password has numbers && has uppercase letters && lowercase letters)) {\n//     return false;\n//   }\n//\n//   return true;\n// }\n"]},"metadata":{},"sourceType":"module"}