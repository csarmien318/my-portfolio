{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXMLHttpRequestOverride = void 0;\n/**\n * XMLHttpRequest override class.\n * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.\n */\n\nvar until_1 = require(\"@open-draft/until\");\n\nvar headers_polyfill_1 = require(\"headers-polyfill\");\n\nvar xmldom_1 = require(\"@xmldom/xmldom\");\n\nvar parseJson_1 = require(\"../../utils/parseJson\");\n\nvar toIsoResponse_1 = require(\"../../utils/toIsoResponse\");\n\nvar uuid_1 = require(\"../../utils/uuid\");\n\nvar bufferFrom_1 = require(\"./utils/bufferFrom\");\n\nvar createEvent_1 = require(\"./utils/createEvent\");\n\nvar createDebug = require('debug');\n\nvar createXMLHttpRequestOverride = function (options) {\n  var _a;\n\n  var pureXMLHttpRequest = options.pureXMLHttpRequest,\n      observer = options.observer,\n      resolver = options.resolver;\n  var debug = createDebug('XHR');\n  return _a =\n  /** @class */\n  function () {\n    function XMLHttpRequestOverride() {\n      // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n      this._events = [];\n      this.UNSENT = 0;\n      this.OPENED = 1;\n      this.HEADERS_RECEIVED = 2;\n      this.LOADING = 3;\n      this.DONE = 4;\n      this.onreadystatechange = null;\n      /* Events */\n\n      this.onabort = null;\n      this.onerror = null;\n      this.onload = null;\n      this.onloadend = null;\n      this.onloadstart = null;\n      this.onprogress = null;\n      this.ontimeout = null;\n      this.url = '';\n      this.method = 'GET';\n      this.readyState = this.UNSENT;\n      this.withCredentials = false;\n      this.status = 200;\n      this.statusText = 'OK';\n      this.data = '';\n      this.response = '';\n      this.responseType = 'text';\n      this.responseText = '';\n      this.responseXML = null;\n      this.responseURL = '';\n      this.upload = {};\n      this.timeout = 0;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    }\n\n    XMLHttpRequestOverride.prototype.setReadyState = function (nextState) {\n      if (nextState === this.readyState) {\n        return;\n      }\n\n      debug('readyState change %d -> %d', this.readyState, nextState);\n      this.readyState = nextState;\n\n      if (nextState !== this.UNSENT) {\n        debug('triggerring readystate change...');\n        this.trigger('readystatechange');\n      }\n    };\n    /**\n     * Triggers both direct callback and attached event listeners\n     * for the given event.\n     */\n\n\n    XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {\n      var e_1, _a;\n\n      debug('trigger \"%s\" (%d)', eventName, this.readyState);\n      debug('resolve listener for event \"%s\"', eventName); // @ts-expect-error XMLHttpRequest class has no index signature.\n\n      var callback = this[\"on\" + eventName];\n      callback === null || callback === void 0 ? void 0 : callback.call(this, createEvent_1.createEvent(this, eventName, options));\n\n      try {\n        for (var _b = __values(this._events), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var event_1 = _c.value;\n\n          if (event_1.name === eventName) {\n            debug('calling mock event listener \"%s\" (%d)', eventName, this.readyState);\n            event_1.listener.call(this, createEvent_1.createEvent(this, eventName, options));\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return this;\n    };\n\n    XMLHttpRequestOverride.prototype.reset = function () {\n      debug('reset');\n      this.setReadyState(this.UNSENT);\n      this.status = 200;\n      this.statusText = 'OK';\n      this.data = '';\n      this.response = null;\n      this.responseText = null;\n      this.responseXML = null;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    };\n\n    XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {\n      if (async === void 0) {\n        async = true;\n      }\n\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          debug = createDebug(\"XHR \" + method + \" \" + url);\n          debug('open', {\n            method: method,\n            url: url,\n            async: async,\n            user: user,\n            password: password\n          });\n          this.reset();\n          this.setReadyState(this.OPENED);\n\n          if (typeof url === 'undefined') {\n            this.url = method;\n            this.method = 'GET';\n          } else {\n            this.url = url;\n            this.method = method;\n            this.async = async;\n            this.user = user;\n            this.password = password;\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.send = function (data) {\n      var _this = this;\n\n      debug('send %s %s', this.method, this.url);\n      this.data = data || '';\n      var url;\n\n      try {\n        url = new URL(this.url);\n      } catch (error) {\n        // Assume a relative URL, if construction of a new `URL` instance fails.\n        // Since `XMLHttpRequest` always executed in a DOM-like environment,\n        // resolve the relative request URL against the current window location.\n        url = new URL(this.url, window.location.href);\n      }\n\n      debug('request headers', this._requestHeaders); // Create an intercepted request instance exposed to the request intercepting middleware.\n\n      var isoRequest = {\n        id: uuid_1.uuidv4(),\n        url: url,\n        method: this.method,\n        headers: this._requestHeaders,\n        credentials: this.withCredentials ? 'include' : 'omit',\n        body: this.data\n      };\n      observer.emit('request', isoRequest);\n      debug('awaiting mocked response...');\n      Promise.resolve(until_1.until(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , resolver(isoRequest, this)];\n          });\n        });\n      })).then(function (_a) {\n        var _b;\n\n        var _c = __read(_a, 2),\n            middlewareException = _c[0],\n            mockedResponse = _c[1]; // When the request middleware throws an exception, error the request.\n        // This cancels the request and is similar to a network error.\n\n\n        if (middlewareException) {\n          debug('middleware function threw an exception!', middlewareException); // No way to propagate the actual error message.\n\n          _this.trigger('error');\n\n          _this.abort();\n\n          return;\n        } // Return a mocked response, if provided in the middleware.\n\n\n        if (mockedResponse) {\n          debug('received mocked response', mockedResponse); // Trigger a loadstart event to indicate the initialization of the fetch.\n\n          _this.trigger('loadstart');\n\n          _this.status = mockedResponse.status || 200;\n          _this.statusText = mockedResponse.statusText || 'OK';\n          _this._responseHeaders = mockedResponse.headers ? headers_polyfill_1.objectToHeaders(mockedResponse.headers) : new headers_polyfill_1.Headers();\n          debug('set response status', _this.status, _this.statusText);\n          debug('set response headers', _this._responseHeaders); // Mark that response headers has been received\n          // and trigger a ready state event to reflect received headers\n          // in a custom `onreadystatechange` callback.\n\n          _this.setReadyState(_this.HEADERS_RECEIVED);\n\n          debug('response type', _this.responseType);\n          _this.response = _this.getResponseBody(mockedResponse.body);\n          _this.responseText = mockedResponse.body || '';\n          _this.responseXML = _this.getResponseXML();\n          debug('set response body', _this.response);\n\n          if (mockedResponse.body && _this.response) {\n            _this.setReadyState(_this.LOADING); // Presense of the mocked response implies a response body (not null).\n            // Presense of the coerced `this.response` implies the mocked body is valid.\n\n\n            var bodyBuffer = bufferFrom_1.bufferFrom(mockedResponse.body); // Trigger a progress event based on the mocked response body.\n\n            _this.trigger('progress', {\n              loaded: bodyBuffer.length,\n              total: bodyBuffer.length\n            });\n          }\n          /**\n           * Explicitly mark the request as done so its response never hangs.\n           * @see https://github.com/mswjs/interceptors/issues/13\n           */\n\n\n          _this.setReadyState(_this.DONE); // Trigger a load event to indicate the fetch has succeeded.\n\n\n          _this.trigger('load'); // Trigger a loadend event to indicate the fetch has completed.\n\n\n          _this.trigger('loadend');\n\n          observer.emit('response', isoRequest, toIsoResponse_1.toIsoResponse(mockedResponse));\n        } else {\n          debug('no mocked response received!'); // Perform an original request, when the request middleware returned no mocked response.\n\n          var originalRequest_1 = new pureXMLHttpRequest();\n          debug('opening an original request %s %s', _this.method, _this.url);\n          originalRequest_1.open(_this.method, _this.url, (_b = _this.async) !== null && _b !== void 0 ? _b : true, _this.user, _this.password); // Reflect a successful state of the original request\n          // on the patched instance.\n\n          originalRequest_1.addEventListener('load', function () {\n            debug('original \"onload\"');\n            _this.status = originalRequest_1.status;\n            _this.statusText = originalRequest_1.statusText;\n            _this.responseURL = originalRequest_1.responseURL;\n            _this.responseType = originalRequest_1.responseType;\n            _this.response = originalRequest_1.response;\n            _this.responseText = originalRequest_1.responseText;\n            _this.responseXML = originalRequest_1.responseXML;\n            debug('set mock request readyState to DONE'); // Explicitly mark the mocked request instance as done\n            // so the response never hangs.\n\n            /**\n             * @note `readystatechange` listener is called TWICE\n             * in the case of unhandled request.\n             */\n\n            _this.setReadyState(_this.DONE);\n\n            debug('received original response', _this.status, _this.statusText);\n            debug('original response body:', _this.response);\n            var responseHeaders = originalRequest_1.getAllResponseHeaders();\n            debug('original response headers:\\n', responseHeaders);\n            _this._responseHeaders = headers_polyfill_1.stringToHeaders(responseHeaders);\n            debug('original response headers (normalized)', _this._responseHeaders);\n            debug('original response finished');\n            observer.emit('response', isoRequest, {\n              status: originalRequest_1.status,\n              statusText: originalRequest_1.statusText,\n              headers: _this._responseHeaders,\n              body: originalRequest_1.response\n            });\n          }); // Assign callbacks and event listeners from the intercepted XHR instance\n          // to the original XHR instance.\n\n          _this.propagateCallbacks(originalRequest_1);\n\n          _this.propagateListeners(originalRequest_1);\n\n          _this.propagateHeaders(originalRequest_1, _this._requestHeaders);\n\n          if (_this.async) {\n            originalRequest_1.timeout = _this.timeout;\n          }\n\n          debug('send', _this.data);\n          originalRequest_1.send(_this.data);\n        }\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.abort = function () {\n      debug('abort');\n\n      if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n        this.setReadyState(this.UNSENT);\n        this.trigger('abort');\n      }\n    };\n\n    XMLHttpRequestOverride.prototype.dispatchEvent = function () {\n      return false;\n    };\n\n    XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {\n      debug('set request header \"%s\" to \"%s\"', name, value);\n\n      this._requestHeaders.append(name, value);\n    };\n\n    XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {\n      debug('get response header \"%s\"', name);\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        debug('cannot return a header: headers not received (state: %s)', this.readyState);\n        return null;\n      }\n\n      var headerValue = this._responseHeaders.get(name);\n\n      debug('resolved response header \"%s\" to \"%s\"', name, headerValue, this._responseHeaders);\n      return headerValue;\n    };\n\n    XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {\n      debug('get all response headers');\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        debug('cannot return headers: headers not received (state: %s)', this.readyState);\n        return '';\n      }\n\n      return headers_polyfill_1.headersToString(this._responseHeaders);\n    };\n\n    XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {\n      debug('addEventListener', name, listener);\n\n      this._events.push({\n        name: name,\n        listener: listener\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {\n      debug('removeEventListener', name, listener);\n      this._events = this._events.filter(function (storedEvent) {\n        return storedEvent.name !== name && storedEvent.listener !== listener;\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.overrideMimeType = function () {};\n    /**\n     * Resolves the response based on the `responseType` value.\n     */\n\n\n    XMLHttpRequestOverride.prototype.getResponseBody = function (body) {\n      // Handle an improperly set \"null\" value of the mocked response body.\n      var textBody = body !== null && body !== void 0 ? body : '';\n      debug('coerced response body to', textBody);\n\n      switch (this.responseType) {\n        case 'json':\n          {\n            debug('resolving response body as JSON');\n            return parseJson_1.parseJson(textBody);\n          }\n\n        case 'blob':\n          {\n            var blobType = this.getResponseHeader('content-type') || 'text/plain';\n            debug('resolving response body as Blob', {\n              type: blobType\n            });\n            return new Blob([textBody], {\n              type: blobType\n            });\n          }\n\n        case 'arraybuffer':\n          {\n            debug('resolving response body as ArrayBuffer');\n            var arrayBuffer = bufferFrom_1.bufferFrom(textBody);\n            return arrayBuffer;\n          }\n\n        default:\n          return textBody;\n      }\n    };\n\n    XMLHttpRequestOverride.prototype.getResponseXML = function () {\n      var contentType = this.getResponseHeader('Content-Type');\n\n      if (contentType === 'application/xml' || contentType === 'text/xml') {\n        return new xmldom_1.DOMParser().parseFromString(this.responseText, contentType);\n      }\n\n      return null;\n    };\n    /**\n     * Propagates mock XMLHttpRequest instance callbacks\n     * to the given XMLHttpRequest instance.\n     */\n\n\n    XMLHttpRequestOverride.prototype.propagateCallbacks = function (request) {\n      request.onabort = this.abort;\n      request.onerror = this.onerror;\n      request.ontimeout = this.ontimeout;\n      request.onload = this.onload;\n      request.onloadstart = this.onloadstart;\n      request.onloadend = this.onloadend;\n      request.onprogress = this.onprogress;\n      request.onreadystatechange = this.onreadystatechange;\n    };\n    /**\n     * Propagates the mock XMLHttpRequest instance listeners\n     * to the given XMLHttpRequest instance.\n     */\n\n\n    XMLHttpRequestOverride.prototype.propagateListeners = function (request) {\n      debug('propagating request listeners (%d) to the original request', this._events.length, this._events);\n\n      this._events.forEach(function (_a) {\n        var name = _a.name,\n            listener = _a.listener;\n        request.addEventListener(name, listener);\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.propagateHeaders = function (request, headers) {\n      debug('propagating request headers to the original request', headers); // Preserve the request headers casing.\n\n      Object.entries(headers.raw()).forEach(function (_a) {\n        var _b = __read(_a, 2),\n            name = _b[0],\n            value = _b[1];\n\n        debug('setting \"%s\" (%s) header on the original request', name, value);\n        request.setRequestHeader(name, value);\n      });\n    };\n\n    return XMLHttpRequestOverride;\n  }(),\n  /* Request state */\n  _a.UNSENT = 0, _a.OPENED = 1, _a.HEADERS_RECEIVED = 2, _a.LOADING = 3, _a.DONE = 4, _a;\n};\n\nexports.createXMLHttpRequestOverride = createXMLHttpRequestOverride;","map":{"version":3,"sources":["../../../src/interceptors/XMLHttpRequest/XMLHttpRequestOverride.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createXMLHttpRequestOverride = void 0;\n/**\n * XMLHttpRequest override class.\n * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.\n */\nvar until_1 = require(\"@open-draft/until\");\nvar headers_polyfill_1 = require(\"headers-polyfill\");\nvar xmldom_1 = require(\"@xmldom/xmldom\");\nvar parseJson_1 = require(\"../../utils/parseJson\");\nvar toIsoResponse_1 = require(\"../../utils/toIsoResponse\");\nvar uuid_1 = require(\"../../utils/uuid\");\nvar bufferFrom_1 = require(\"./utils/bufferFrom\");\nvar createEvent_1 = require(\"./utils/createEvent\");\nvar createDebug = require('debug');\nvar createXMLHttpRequestOverride = function (options) {\n    var _a;\n    var pureXMLHttpRequest = options.pureXMLHttpRequest, observer = options.observer, resolver = options.resolver;\n    var debug = createDebug('XHR');\n    return _a = /** @class */ (function () {\n            function XMLHttpRequestOverride() {\n                // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n                this._events = [];\n                this.UNSENT = 0;\n                this.OPENED = 1;\n                this.HEADERS_RECEIVED = 2;\n                this.LOADING = 3;\n                this.DONE = 4;\n                this.onreadystatechange = null;\n                /* Events */\n                this.onabort = null;\n                this.onerror = null;\n                this.onload = null;\n                this.onloadend = null;\n                this.onloadstart = null;\n                this.onprogress = null;\n                this.ontimeout = null;\n                this.url = '';\n                this.method = 'GET';\n                this.readyState = this.UNSENT;\n                this.withCredentials = false;\n                this.status = 200;\n                this.statusText = 'OK';\n                this.data = '';\n                this.response = '';\n                this.responseType = 'text';\n                this.responseText = '';\n                this.responseXML = null;\n                this.responseURL = '';\n                this.upload = {};\n                this.timeout = 0;\n                this._requestHeaders = new headers_polyfill_1.Headers();\n                this._responseHeaders = new headers_polyfill_1.Headers();\n            }\n            XMLHttpRequestOverride.prototype.setReadyState = function (nextState) {\n                if (nextState === this.readyState) {\n                    return;\n                }\n                debug('readyState change %d -> %d', this.readyState, nextState);\n                this.readyState = nextState;\n                if (nextState !== this.UNSENT) {\n                    debug('triggerring readystate change...');\n                    this.trigger('readystatechange');\n                }\n            };\n            /**\n             * Triggers both direct callback and attached event listeners\n             * for the given event.\n             */\n            XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {\n                var e_1, _a;\n                debug('trigger \"%s\" (%d)', eventName, this.readyState);\n                debug('resolve listener for event \"%s\"', eventName);\n                // @ts-expect-error XMLHttpRequest class has no index signature.\n                var callback = this[\"on\" + eventName];\n                callback === null || callback === void 0 ? void 0 : callback.call(this, createEvent_1.createEvent(this, eventName, options));\n                try {\n                    for (var _b = __values(this._events), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var event_1 = _c.value;\n                        if (event_1.name === eventName) {\n                            debug('calling mock event listener \"%s\" (%d)', eventName, this.readyState);\n                            event_1.listener.call(this, createEvent_1.createEvent(this, eventName, options));\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                return this;\n            };\n            XMLHttpRequestOverride.prototype.reset = function () {\n                debug('reset');\n                this.setReadyState(this.UNSENT);\n                this.status = 200;\n                this.statusText = 'OK';\n                this.data = '';\n                this.response = null;\n                this.responseText = null;\n                this.responseXML = null;\n                this._requestHeaders = new headers_polyfill_1.Headers();\n                this._responseHeaders = new headers_polyfill_1.Headers();\n            };\n            XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {\n                if (async === void 0) { async = true; }\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        debug = createDebug(\"XHR \" + method + \" \" + url);\n                        debug('open', { method: method, url: url, async: async, user: user, password: password });\n                        this.reset();\n                        this.setReadyState(this.OPENED);\n                        if (typeof url === 'undefined') {\n                            this.url = method;\n                            this.method = 'GET';\n                        }\n                        else {\n                            this.url = url;\n                            this.method = method;\n                            this.async = async;\n                            this.user = user;\n                            this.password = password;\n                        }\n                        return [2 /*return*/];\n                    });\n                });\n            };\n            XMLHttpRequestOverride.prototype.send = function (data) {\n                var _this = this;\n                debug('send %s %s', this.method, this.url);\n                this.data = data || '';\n                var url;\n                try {\n                    url = new URL(this.url);\n                }\n                catch (error) {\n                    // Assume a relative URL, if construction of a new `URL` instance fails.\n                    // Since `XMLHttpRequest` always executed in a DOM-like environment,\n                    // resolve the relative request URL against the current window location.\n                    url = new URL(this.url, window.location.href);\n                }\n                debug('request headers', this._requestHeaders);\n                // Create an intercepted request instance exposed to the request intercepting middleware.\n                var isoRequest = {\n                    id: uuid_1.uuidv4(),\n                    url: url,\n                    method: this.method,\n                    headers: this._requestHeaders,\n                    credentials: this.withCredentials ? 'include' : 'omit',\n                    body: this.data,\n                };\n                observer.emit('request', isoRequest);\n                debug('awaiting mocked response...');\n                Promise.resolve(until_1.until(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                    return [2 /*return*/, resolver(isoRequest, this)];\n                }); }); })).then(function (_a) {\n                    var _b;\n                    var _c = __read(_a, 2), middlewareException = _c[0], mockedResponse = _c[1];\n                    // When the request middleware throws an exception, error the request.\n                    // This cancels the request and is similar to a network error.\n                    if (middlewareException) {\n                        debug('middleware function threw an exception!', middlewareException);\n                        // No way to propagate the actual error message.\n                        _this.trigger('error');\n                        _this.abort();\n                        return;\n                    }\n                    // Return a mocked response, if provided in the middleware.\n                    if (mockedResponse) {\n                        debug('received mocked response', mockedResponse);\n                        // Trigger a loadstart event to indicate the initialization of the fetch.\n                        _this.trigger('loadstart');\n                        _this.status = mockedResponse.status || 200;\n                        _this.statusText = mockedResponse.statusText || 'OK';\n                        _this._responseHeaders = mockedResponse.headers\n                            ? headers_polyfill_1.objectToHeaders(mockedResponse.headers)\n                            : new headers_polyfill_1.Headers();\n                        debug('set response status', _this.status, _this.statusText);\n                        debug('set response headers', _this._responseHeaders);\n                        // Mark that response headers has been received\n                        // and trigger a ready state event to reflect received headers\n                        // in a custom `onreadystatechange` callback.\n                        _this.setReadyState(_this.HEADERS_RECEIVED);\n                        debug('response type', _this.responseType);\n                        _this.response = _this.getResponseBody(mockedResponse.body);\n                        _this.responseText = mockedResponse.body || '';\n                        _this.responseXML = _this.getResponseXML();\n                        debug('set response body', _this.response);\n                        if (mockedResponse.body && _this.response) {\n                            _this.setReadyState(_this.LOADING);\n                            // Presense of the mocked response implies a response body (not null).\n                            // Presense of the coerced `this.response` implies the mocked body is valid.\n                            var bodyBuffer = bufferFrom_1.bufferFrom(mockedResponse.body);\n                            // Trigger a progress event based on the mocked response body.\n                            _this.trigger('progress', {\n                                loaded: bodyBuffer.length,\n                                total: bodyBuffer.length,\n                            });\n                        }\n                        /**\n                         * Explicitly mark the request as done so its response never hangs.\n                         * @see https://github.com/mswjs/interceptors/issues/13\n                         */\n                        _this.setReadyState(_this.DONE);\n                        // Trigger a load event to indicate the fetch has succeeded.\n                        _this.trigger('load');\n                        // Trigger a loadend event to indicate the fetch has completed.\n                        _this.trigger('loadend');\n                        observer.emit('response', isoRequest, toIsoResponse_1.toIsoResponse(mockedResponse));\n                    }\n                    else {\n                        debug('no mocked response received!');\n                        // Perform an original request, when the request middleware returned no mocked response.\n                        var originalRequest_1 = new pureXMLHttpRequest();\n                        debug('opening an original request %s %s', _this.method, _this.url);\n                        originalRequest_1.open(_this.method, _this.url, (_b = _this.async) !== null && _b !== void 0 ? _b : true, _this.user, _this.password);\n                        // Reflect a successful state of the original request\n                        // on the patched instance.\n                        originalRequest_1.addEventListener('load', function () {\n                            debug('original \"onload\"');\n                            _this.status = originalRequest_1.status;\n                            _this.statusText = originalRequest_1.statusText;\n                            _this.responseURL = originalRequest_1.responseURL;\n                            _this.responseType = originalRequest_1.responseType;\n                            _this.response = originalRequest_1.response;\n                            _this.responseText = originalRequest_1.responseText;\n                            _this.responseXML = originalRequest_1.responseXML;\n                            debug('set mock request readyState to DONE');\n                            // Explicitly mark the mocked request instance as done\n                            // so the response never hangs.\n                            /**\n                             * @note `readystatechange` listener is called TWICE\n                             * in the case of unhandled request.\n                             */\n                            _this.setReadyState(_this.DONE);\n                            debug('received original response', _this.status, _this.statusText);\n                            debug('original response body:', _this.response);\n                            var responseHeaders = originalRequest_1.getAllResponseHeaders();\n                            debug('original response headers:\\n', responseHeaders);\n                            _this._responseHeaders = headers_polyfill_1.stringToHeaders(responseHeaders);\n                            debug('original response headers (normalized)', _this._responseHeaders);\n                            debug('original response finished');\n                            observer.emit('response', isoRequest, {\n                                status: originalRequest_1.status,\n                                statusText: originalRequest_1.statusText,\n                                headers: _this._responseHeaders,\n                                body: originalRequest_1.response,\n                            });\n                        });\n                        // Assign callbacks and event listeners from the intercepted XHR instance\n                        // to the original XHR instance.\n                        _this.propagateCallbacks(originalRequest_1);\n                        _this.propagateListeners(originalRequest_1);\n                        _this.propagateHeaders(originalRequest_1, _this._requestHeaders);\n                        if (_this.async) {\n                            originalRequest_1.timeout = _this.timeout;\n                        }\n                        debug('send', _this.data);\n                        originalRequest_1.send(_this.data);\n                    }\n                });\n            };\n            XMLHttpRequestOverride.prototype.abort = function () {\n                debug('abort');\n                if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n                    this.setReadyState(this.UNSENT);\n                    this.trigger('abort');\n                }\n            };\n            XMLHttpRequestOverride.prototype.dispatchEvent = function () {\n                return false;\n            };\n            XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {\n                debug('set request header \"%s\" to \"%s\"', name, value);\n                this._requestHeaders.append(name, value);\n            };\n            XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {\n                debug('get response header \"%s\"', name);\n                if (this.readyState < this.HEADERS_RECEIVED) {\n                    debug('cannot return a header: headers not received (state: %s)', this.readyState);\n                    return null;\n                }\n                var headerValue = this._responseHeaders.get(name);\n                debug('resolved response header \"%s\" to \"%s\"', name, headerValue, this._responseHeaders);\n                return headerValue;\n            };\n            XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {\n                debug('get all response headers');\n                if (this.readyState < this.HEADERS_RECEIVED) {\n                    debug('cannot return headers: headers not received (state: %s)', this.readyState);\n                    return '';\n                }\n                return headers_polyfill_1.headersToString(this._responseHeaders);\n            };\n            XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {\n                debug('addEventListener', name, listener);\n                this._events.push({\n                    name: name,\n                    listener: listener,\n                });\n            };\n            XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {\n                debug('removeEventListener', name, listener);\n                this._events = this._events.filter(function (storedEvent) {\n                    return storedEvent.name !== name && storedEvent.listener !== listener;\n                });\n            };\n            XMLHttpRequestOverride.prototype.overrideMimeType = function () { };\n            /**\n             * Resolves the response based on the `responseType` value.\n             */\n            XMLHttpRequestOverride.prototype.getResponseBody = function (body) {\n                // Handle an improperly set \"null\" value of the mocked response body.\n                var textBody = body !== null && body !== void 0 ? body : '';\n                debug('coerced response body to', textBody);\n                switch (this.responseType) {\n                    case 'json': {\n                        debug('resolving response body as JSON');\n                        return parseJson_1.parseJson(textBody);\n                    }\n                    case 'blob': {\n                        var blobType = this.getResponseHeader('content-type') || 'text/plain';\n                        debug('resolving response body as Blob', { type: blobType });\n                        return new Blob([textBody], {\n                            type: blobType,\n                        });\n                    }\n                    case 'arraybuffer': {\n                        debug('resolving response body as ArrayBuffer');\n                        var arrayBuffer = bufferFrom_1.bufferFrom(textBody);\n                        return arrayBuffer;\n                    }\n                    default:\n                        return textBody;\n                }\n            };\n            XMLHttpRequestOverride.prototype.getResponseXML = function () {\n                var contentType = this.getResponseHeader('Content-Type');\n                if (contentType === 'application/xml' || contentType === 'text/xml') {\n                    return new xmldom_1.DOMParser().parseFromString(this.responseText, contentType);\n                }\n                return null;\n            };\n            /**\n             * Propagates mock XMLHttpRequest instance callbacks\n             * to the given XMLHttpRequest instance.\n             */\n            XMLHttpRequestOverride.prototype.propagateCallbacks = function (request) {\n                request.onabort = this.abort;\n                request.onerror = this.onerror;\n                request.ontimeout = this.ontimeout;\n                request.onload = this.onload;\n                request.onloadstart = this.onloadstart;\n                request.onloadend = this.onloadend;\n                request.onprogress = this.onprogress;\n                request.onreadystatechange = this.onreadystatechange;\n            };\n            /**\n             * Propagates the mock XMLHttpRequest instance listeners\n             * to the given XMLHttpRequest instance.\n             */\n            XMLHttpRequestOverride.prototype.propagateListeners = function (request) {\n                debug('propagating request listeners (%d) to the original request', this._events.length, this._events);\n                this._events.forEach(function (_a) {\n                    var name = _a.name, listener = _a.listener;\n                    request.addEventListener(name, listener);\n                });\n            };\n            XMLHttpRequestOverride.prototype.propagateHeaders = function (request, headers) {\n                debug('propagating request headers to the original request', headers);\n                // Preserve the request headers casing.\n                Object.entries(headers.raw()).forEach(function (_a) {\n                    var _b = __read(_a, 2), name = _b[0], value = _b[1];\n                    debug('setting \"%s\" (%s) header on the original request', name, value);\n                    request.setRequestHeader(name, value);\n                });\n            };\n            return XMLHttpRequestOverride;\n        }()),\n        /* Request state */\n        _a.UNSENT = 0,\n        _a.OPENED = 1,\n        _a.HEADERS_RECEIVED = 2,\n        _a.LOADING = 3,\n        _a.DONE = 4,\n        _a;\n};\nexports.createXMLHttpRequestOverride = createXMLHttpRequestOverride;\n//# sourceMappingURL=XMLHttpRequestOverride.js.map"]},"metadata":{},"sourceType":"script"}