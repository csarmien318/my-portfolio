{"ast":null,"code":"import { R as RequestHandler, f as cleanUrl, h as getSearchParams, d as devUtils, m as matchRequestUrl, g as getPublicUrlFromRequest, i as prepareRequest, j as prepareResponse, k as getStatusCodeColor, l as getTimestamp } from './RequestHandler-deps.js';\nimport { b as set, s as status, d as cookie, g as json, e as delay, f as fetch } from './fetch-deps.js';\nimport { b as body, t as text, x as xml } from './xml-deps.js';\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\n\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\nvar RESTMethods;\n\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\n\nconst restContext = {\n  set,\n  status,\n  cookie,\n  body,\n  text,\n  json,\n  xml,\n  delay,\n  fetch\n};\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\n\nclass RestHandler extends RequestHandler {\n  constructor(method, path, resolver) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      ctx: restContext,\n      resolver\n    });\n    this.checkRedundantQueryParameters();\n  }\n\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      path\n    } = this.info;\n\n    if (path instanceof RegExp) {\n      return;\n    }\n\n    const url = cleanUrl(path); // Bypass request handler URLs that have no redundant characters.\n\n    if (url === path) {\n      return;\n    }\n\n    const searchParams = getSearchParams(path);\n    searchParams.forEach((_, paramName) => {});\n    devUtils.warn(`Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`);\n  }\n\n  parse(request, resolutionContext) {\n    return matchRequestUrl(request.url, this.info.path, resolutionContext === null || resolutionContext === void 0 ? void 0 : resolutionContext.baseUrl);\n  }\n\n  getPublicRequest(request, parsedResult) {\n    return Object.assign(Object.assign({}, request), {\n      params: parsedResult.params || {}\n    });\n  }\n\n  predicate(request, parsedResult) {\n    const matchesMethod = this.info.method instanceof RegExp ? this.info.method.test(request.method) : isStringEqual(this.info.method, request.method);\n    return matchesMethod && parsedResult.matches;\n  }\n\n  log(request, response) {\n    const publicUrl = getPublicUrlFromRequest(request);\n    const loggedRequest = prepareRequest(request);\n    const loggedResponse = prepareResponse(response);\n    const statusColor = getStatusCodeColor(response.status);\n    console.groupCollapsed(devUtils.formatMessage('%s %s %s (%c%s%c)'), getTimestamp(), request.method, publicUrl, `color:${statusColor}`, `${response.status} ${response.statusText}`, 'color:inherit');\n    console.log('Request', loggedRequest);\n    console.log('Handler:', {\n      mask: this.info.path,\n      resolver: this.resolver\n    });\n    console.log('Response', loggedResponse);\n    console.groupEnd();\n  }\n\n}\n\nfunction createRestHandler(method) {\n  return (path, resolver) => {\n    return new RestHandler(method, path, resolver);\n  };\n}\n\nconst rest = {\n  all: createRestHandler(/.+/),\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/client/node_modules/msw/lib/esm/rest-deps.js"],"names":["R","RequestHandler","f","cleanUrl","h","getSearchParams","d","devUtils","m","matchRequestUrl","g","getPublicUrlFromRequest","i","prepareRequest","j","prepareResponse","k","getStatusCodeColor","l","getTimestamp","b","set","s","status","cookie","json","e","delay","fetch","body","t","text","x","xml","isStringEqual","actual","expected","toLowerCase","RESTMethods","restContext","RestHandler","constructor","method","path","resolver","info","header","ctx","checkRedundantQueryParameters","RegExp","url","searchParams","forEach","_","paramName","warn","parse","request","resolutionContext","baseUrl","getPublicRequest","parsedResult","Object","assign","params","predicate","matchesMethod","test","matches","log","response","publicUrl","loggedRequest","loggedResponse","statusColor","console","groupCollapsed","formatMessage","statusText","mask","groupEnd","createRestHandler","rest","all","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","options","OPTIONS","a","r"],"mappings":"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","sourcesContent":["import { R as RequestHandler, f as cleanUrl, h as getSearchParams, d as devUtils, m as matchRequestUrl, g as getPublicUrlFromRequest, i as prepareRequest, j as prepareResponse, k as getStatusCodeColor, l as getTimestamp } from './RequestHandler-deps.js';\nimport { b as set, s as status, d as cookie, g as json, e as delay, f as fetch } from './fetch-deps.js';\nimport { b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\r\nfunction isStringEqual(actual, expected) {\r\n    return actual.toLowerCase() === expected.toLowerCase();\r\n}\n\nvar RESTMethods;\r\n(function (RESTMethods) {\r\n    RESTMethods[\"HEAD\"] = \"HEAD\";\r\n    RESTMethods[\"GET\"] = \"GET\";\r\n    RESTMethods[\"POST\"] = \"POST\";\r\n    RESTMethods[\"PUT\"] = \"PUT\";\r\n    RESTMethods[\"PATCH\"] = \"PATCH\";\r\n    RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\r\n    RESTMethods[\"DELETE\"] = \"DELETE\";\r\n})(RESTMethods || (RESTMethods = {}));\r\nconst restContext = {\r\n    set,\r\n    status,\r\n    cookie,\r\n    body,\r\n    text,\r\n    json,\r\n    xml,\r\n    delay,\r\n    fetch,\r\n};\r\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\r\nclass RestHandler extends RequestHandler {\r\n    constructor(method, path, resolver) {\r\n        super({\r\n            info: {\r\n                header: `${method} ${path}`,\r\n                path,\r\n                method,\r\n            },\r\n            ctx: restContext,\r\n            resolver,\r\n        });\r\n        this.checkRedundantQueryParameters();\r\n    }\r\n    checkRedundantQueryParameters() {\r\n        const { method, path } = this.info;\r\n        if (path instanceof RegExp) {\r\n            return;\r\n        }\r\n        const url = cleanUrl(path);\r\n        // Bypass request handler URLs that have no redundant characters.\r\n        if (url === path) {\r\n            return;\r\n        }\r\n        const searchParams = getSearchParams(path);\r\n        searchParams.forEach((_, paramName) => {\r\n        });\r\n        devUtils.warn(`Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`);\r\n    }\r\n    parse(request, resolutionContext) {\r\n        return matchRequestUrl(request.url, this.info.path, resolutionContext === null || resolutionContext === void 0 ? void 0 : resolutionContext.baseUrl);\r\n    }\r\n    getPublicRequest(request, parsedResult) {\r\n        return Object.assign(Object.assign({}, request), { params: parsedResult.params || {} });\r\n    }\r\n    predicate(request, parsedResult) {\r\n        const matchesMethod = this.info.method instanceof RegExp\r\n            ? this.info.method.test(request.method)\r\n            : isStringEqual(this.info.method, request.method);\r\n        return matchesMethod && parsedResult.matches;\r\n    }\r\n    log(request, response) {\r\n        const publicUrl = getPublicUrlFromRequest(request);\r\n        const loggedRequest = prepareRequest(request);\r\n        const loggedResponse = prepareResponse(response);\r\n        const statusColor = getStatusCodeColor(response.status);\r\n        console.groupCollapsed(devUtils.formatMessage('%s %s %s (%c%s%c)'), getTimestamp(), request.method, publicUrl, `color:${statusColor}`, `${response.status} ${response.statusText}`, 'color:inherit');\r\n        console.log('Request', loggedRequest);\r\n        console.log('Handler:', {\r\n            mask: this.info.path,\r\n            resolver: this.resolver,\r\n        });\r\n        console.log('Response', loggedResponse);\r\n        console.groupEnd();\r\n    }\r\n}\n\nfunction createRestHandler(method) {\r\n    return (path, resolver) => {\r\n        return new RestHandler(method, path, resolver);\r\n    };\r\n}\r\nconst rest = {\r\n    all: createRestHandler(/.+/),\r\n    head: createRestHandler(RESTMethods.HEAD),\r\n    get: createRestHandler(RESTMethods.GET),\r\n    post: createRestHandler(RESTMethods.POST),\r\n    put: createRestHandler(RESTMethods.PUT),\r\n    delete: createRestHandler(RESTMethods.DELETE),\r\n    patch: createRestHandler(RESTMethods.PATCH),\r\n    options: createRestHandler(RESTMethods.OPTIONS),\r\n};\n\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };\n"]},"metadata":{},"sourceType":"module"}