{"ast":null,"code":"/**\r\n * Sets a raw response body. Does not append any `Content-Type` headers.\r\n * @example\r\n * res(ctx.body('Successful response'))\r\n * res(ctx.body(JSON.stringify({ key: 'value' })))\r\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\r\n */\nconst body = value => {\n  return res => {\n    res.body = value;\n    return res;\n  };\n};\n/**\r\n * Sets a textual response body. Appends a `Content-Type: text/plain`\r\n * header on the mocked response.\r\n * @example res(ctx.text('Successful response'))\r\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\r\n */\n\n\nconst text = body => {\n  return res => {\n    res.headers.set('Content-Type', 'text/plain');\n    res.body = body;\n    return res;\n  };\n};\n/**\r\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\r\n * on the mocked response.\r\n * @example\r\n * res(ctx.xml('<node key=\"value\">Content</node>'))\r\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\r\n */\n\n\nconst xml = body => {\n  return res => {\n    res.headers.set('Content-Type', 'text/xml');\n    res.body = body;\n    return res;\n  };\n};\n\nexport { body as b, text as t, xml as x };","map":{"version":3,"sources":["/Users/chritsophersarmiento/git/my-portfolio/node_modules/msw/lib/esm/xml-deps.js"],"names":["body","value","res","text","headers","set","xml","b","t","x"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAIC,KAAD,IAAW;AACpB,SAAQC,GAAD,IAAS;AACZA,IAAAA,GAAG,CAACF,IAAJ,GAAWC,KAAX;AACA,WAAOC,GAAP;AACH,GAHD;AAIH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAIH,IAAD,IAAU;AACnB,SAAQE,GAAD,IAAS;AACZA,IAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,cAAhB,EAAgC,YAAhC;AACAH,IAAAA,GAAG,CAACF,IAAJ,GAAWA,IAAX;AACA,WAAOE,GAAP;AACH,GAJD;AAKH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,GAAG,GAAIN,IAAD,IAAU;AAClB,SAAQE,GAAD,IAAS;AACZA,IAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,cAAhB,EAAgC,UAAhC;AACAH,IAAAA,GAAG,CAACF,IAAJ,GAAWA,IAAX;AACA,WAAOE,GAAP;AACH,GAJD;AAKH,CAND;;AAQA,SAASF,IAAI,IAAIO,CAAjB,EAAoBJ,IAAI,IAAIK,CAA5B,EAA+BF,GAAG,IAAIG,CAAtC","sourcesContent":["/**\r\n * Sets a raw response body. Does not append any `Content-Type` headers.\r\n * @example\r\n * res(ctx.body('Successful response'))\r\n * res(ctx.body(JSON.stringify({ key: 'value' })))\r\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\r\n */\r\nconst body = (value) => {\r\n    return (res) => {\r\n        res.body = value;\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets a textual response body. Appends a `Content-Type: text/plain`\r\n * header on the mocked response.\r\n * @example res(ctx.text('Successful response'))\r\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\r\n */\r\nconst text = (body) => {\r\n    return (res) => {\r\n        res.headers.set('Content-Type', 'text/plain');\r\n        res.body = body;\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\r\n * on the mocked response.\r\n * @example\r\n * res(ctx.xml('<node key=\"value\">Content</node>'))\r\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\r\n */\r\nconst xml = (body) => {\r\n    return (res) => {\r\n        res.headers.set('Content-Type', 'text/xml');\r\n        res.body = body;\r\n        return res;\r\n    };\r\n};\n\nexport { body as b, text as t, xml as x };\n"]},"metadata":{},"sourceType":"module"}